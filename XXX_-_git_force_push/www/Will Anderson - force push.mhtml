From: <Saved by Blink>
Snapshot-Content-Location: https://willi.am/blog/page/4/
Subject: Will Anderson
Date: Fri, 16 Feb 2024 16:46:11 +0100
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----"


------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: text/html
Content-ID: <frame-D7864032014E65D0BD53E1E1663AB7CC@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://willi.am/blog/page/4/

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8">
=09
	<title>Will Anderson</title>
	<meta name=3D"author" content=3D"Will Anderson">

=09
	<meta name=3D"description" content=3D"Let=E2=80=99s talk about force pushi=
ng in Git.
We=E2=80=99ll cover when you should do it, when you shouldn=E2=80=99t, and =
how to do it safely. TL;DR Do =E2=80=A6">
=09
	<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D1=
, maximum-scale=3D1">

    <meta name=3D"twitter:card" content=3D"summary">
    <meta name=3D"twitter:site" content=3D"@itsananderson">
    <meta name=3D"twitter:title" content=3D"Will Anderson">
    <meta name=3D"twitter:description" content=3D"Let=E2=80=99s talk about =
force pushing in Git.
We=E2=80=99ll cover when you should do it, when you shouldn=E2=80=99t, and =
how to do it safely. TL;DR Do =E2=80=A6">

	<link href=3D"http://william-backend.azurewebsites.net/feed/" rel=3D"alter=
nate" title=3D"Will Anderson" type=3D"application/atom+xml">
	<link rel=3D"canonical" href=3D"https://willi.am/blog/page/4/">
	<link href=3D"https://willi.am/favicon.ico" rel=3D"shortcut icon">
	<link href=3D"https://willi.am/stylesheets/screen.css" media=3D"screen, pr=
ojection" rel=3D"stylesheet" type=3D"text/css">
	<!--[if lt IE 9]><script src=3D"//html5shiv.googlecode.com/svn/trunk/html5=
.js"></script><![endif]-->
=09
=09
</head>


<body>
	<header id=3D"header" class=3D"inner"><h1><a href=3D"https://willi.am/">Wi=
ll Anderson</a></h1>
<nav id=3D"main-nav"><ul class=3D"main">
	<li><a href=3D"https://willi.am/work-with-me">Work With Me</a></li>
	<li><a href=3D"https://willi.am/blog/archives">Archives</a></li>
</ul>
</nav>
<nav id=3D"mobile-nav">
	<div class=3D"alignleft menu">
		<a class=3D"button">Menu</a>
		<div class=3D"container"><ul class=3D"main">
	<li><a href=3D"https://willi.am/work-with-me">Work With Me</a></li>
	<li><a href=3D"https://willi.am/blog/archives">Archives</a></li>
</ul>
</div>
	</div>
	<div class=3D"alignright search">
		<a class=3D"button"></a>
		<div class=3D"container">
			<form action=3D"https://www.google.com/search" method=3D"get">
				<input type=3D"text" name=3D"q" results=3D"0">
			=09
			</form>
		</div>
	</div>
</nav>
<nav id=3D"sub-nav" class=3D"alignright">
	<div class=3D"social">
	=09
	=09
	=09
		<a class=3D"twitter" href=3D"http://twitter.com/itsananderson" title=3D"T=
witter">Twitter</a>
	=09
	=09
		<a class=3D"github" href=3D"https://github.com/itsananderson" title=3D"Gi=
tHub">GitHub</a>
	=09
   =20
	=09
	=09
	=09
	=09
	=09
		<a class=3D"rss" href=3D"http://william-backend.azurewebsites.net/feed/" =
title=3D"RSS">RSS</a>
	=09
   =20
	</div>
	<form class=3D"search" action=3D"https://www.google.com/search" method=3D"=
get">
		<input class=3D"alignright" type=3D"text" name=3D"q" results=3D"0">
	=09
	</form>
</nav>

</header>
=09
	=09
=09
	<div id=3D"content" class=3D"inner">


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/08/12/the-dark-side-of-the-force-pu=
sh/">
	=09
			The Dark Side of the Force Push</a>
	</h2>
	<div class=3D"entry-content">
		<p>Let=E2=80=99s talk about force pushing in Git.
We=E2=80=99ll cover when you should do it, when you shouldn=E2=80=99t, and =
how to do it safely.</p>

<p>TL;DR</p>

<p>Do this:</p>

<p><img src=3D"http://itsananderson.blob.core.windows.net/post-images/obi-w=
an-droids.gif" alt=3D"Force Push Droids"></p>

<p>Not this:</p>

<p><img src=3D"http://itsananderson.blob.core.windows.net/post-images/obi-w=
an-hates.gif" alt=3D"Force Push Fail"></p>

<h2>Pushing Changes</h2>

<p>When you push changes to a remote server, Git prevents you from pushing =
your changes if the remote has changes you=E2=80=99re missing.
This feature is designed to prevent data loss.
If you run into this, you=E2=80=99ll likely see a message similar to this:<=
/p>

<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">$ =
git push origin my-branch
</span><span class=3D"line">To git@github.com:itsananderson/foo.git
</span><span class=3D"line"> ! [rejected]        my-branch -&gt; my-branch =
(non-fast-forward)
</span><span class=3D"line">error: failed to push some refs to 'git@github.=
com:itsananderson/foo.git'
</span><span class=3D"line">hint: Updates were rejected because the tip of =
your current branch is behind
</span><span class=3D"line">hint: its remote counterpart. Integrate the rem=
ote changes (e.g.
</span><span class=3D"line">hint: 'git pull ...') before pushing again.
</span><span class=3D"line">hint: See the 'Note about fast-forwards' in 'gi=
t push --help' for details.</span></code></pre></td></tr></tbody></table></=
div></figure>


<p>99% of the time, the appropriate solution to this message is to <code>gi=
t pull</code> to fetch changes from the server,
then <code>git push origin my-branch</code> to push your updated branch to =
the server.</p>

<h2>Rebasing</h2>

<p>The only real exception to the =E2=80=9Calways pull, then push=E2=80=9D =
rule, is rebasing.
When you rebase, you=E2=80=99re creating a copy of your commit history.
Git treats this new copy of history as a completely different set of commit=
s (because it is).</p>

<p>I won=E2=80=99t go into deep detail about rebasing, because it=E2=80=99s=
 been covered many times before.
GitHub has a good <a href=3D"https://help.github.com/articles/using-git-reb=
ase">tutorial on rebasing</a>.
If you want some <a href=3D"http://willi.am/git-fundamentals-rebasing/">hig=
h-level concept slides on rebasing</a>, I wrote some for a team presentatio=
n.</p>

<p>Point is, when you rebase a branch that you=E2=80=99ve pushed to a remot=
e server, your copy of the branch and the server=E2=80=99s copy will be con=
sidered completely distinct.
This means when you try to push, the remote server will reject your changes=
 because they=E2=80=99re not a fast-forward.
However, if you <code>git pull</code>, you=E2=80=99ll end up with two copie=
s of the branch which are then merged with a merge commit.
In addition to muddling your commit history, this will re-introduce whateve=
r you were trying to change with your rebase.</p>

<p>In this very specific case, the correct solution <em>might</em> be to <c=
ode>git push origin my-branch -f</code>.</p>

<h2>Force Push Basics</h2>

<p>So you have a branch that you=E2=80=99ve rebased, and you want to force =
push it to the remote server.</p>

<p><img src=3D"http://itsananderson.blob.core.windows.net/post-images/force=
-push-will-smith.gif" alt=3D"Will Smith Force Push"></p>

<p>First, make sure nobody=E2=80=99s pulled down your branch and done local=
 work off of it.
If they have, your force push may make it difficult for them to reconcile t=
heir changes with yours.</p>

<p>If you=E2=80=99re working on a team and need to rebase a shared branch, =
here are the steps:</p>

<ol>
<li>Make sure your team has committed and pushed any pending changes</li>
<li>Ask your team to pause work on that branch temporarily</li>
<li>Make sure you have the latest changes for that branch (git pull)</li>
<li>Rebase, then <code>git push origin &lt;yourbranch&gt; -f</code></li>
<li>Have your team fix up their local branches with <code>git checkout &lt;=
yourbranch&gt;</code>, <code>git fetch</code> and <code>git reset --hard or=
igin/&lt;yourbranch&gt;</code></li>
</ol>


<p>As you can see, this is a complicated process.
It requires team coordination, and potentially blocks team members from doi=
ng work while you rebase.
As a general rule, avoid rebasing or otherwise modifying history on pushed =
branches unless you=E2=80=99ve accidentally published <a href=3D"https://he=
lp.github.com/articles/remove-sensitive-data">sensitive data</a>.</p>

<p>If you=E2=80=99re working alone, the process is a little simpler.
Simply rebase and then <code>git push origin &lt;yourbranch&gt; -f</code>.
Keep in mind, however, that you may still cause headaches for other people =
if you rebase on a public GitHub (Bitbucket, etc.) repository.</p>

<h2>Aside: Understanding Remote Tracking Branches</h2>

<p>Git uses the concept of remote tracking branches (or branch upstreams) t=
o help you associate your local branches with the branches on remote server=
s.
If you=E2=80=99ve ever seen this message, that=E2=80=99s what it=E2=80=99s =
talking about: <code>Branch my-branch set up to track remote branch my-bran=
ch origin.</code></p>

<p>Additionally, if you=E2=80=99ve seen this message when you ran <code>git=
 status</code>, it means your branch is tracking a remote branch:</p>

<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">On=
 branch my-branch
</span><span class=3D"line">Your branch and 'origin/my-branch' have diverge=
d,
</span><span class=3D"line">and have 5 and 2 different commit each, respect=
ively.</span></code></pre></td></tr></tbody></table></div></figure>


<p>Finally, when you run <code>git pull</code> or <code>git push</code>, Gi=
t can use the remote tracking branch to know which remote branch to interac=
t with.
This keeps you from having to type <code>git pull origin my-branch</code> e=
very time.</p>

<p>There=E2=80=99s a blog post with more info on <a href=3D"http://felipec.=
wordpress.com/2013/09/01/advanced-git-concepts-the-upstream-tracking-branch=
/">remote tracking branches and upstreams</a>.</p>

<h2>Force Push Pitfalls</h2>

<p>When you start force pushing, there are a few pitfalls you should be awa=
re of.</p>

<p><img src=3D"http://itsananderson.blob.core.windows.net/post-images/force=
-push-yoda.gif" alt=3D"Yoda Force Push"></p>

<h3>Overwriting Changes</h3>

<p>Before you force push a branch, double check that nobody has pushed new =
changes to that branch.
If they have, and you don=E2=80=99t pull them in, you=E2=80=99ll overwrite =
them when you force push.</p>

<p>With online source control, you can just browse the repository and check=
 the commit history for your branch.</p>

<p>If you don=E2=80=99t have a web UI, you can also check directly in the s=
ource.</p>

<ol>
<li>Run <code>git fetch</code> to pull down the latest changes to your mach=
ine</li>
<li>Run <code>git log origin/&lt;yourbranch&gt;</code> to remote branch=E2=
=80=99s log</li>
<li>If you don=E2=80=99t see any new commits, it=E2=80=99s probably safe to=
 proceed (ignoring developer race conditions)</li>
<li>If you see new changes, resolve them into your local branch before you =
force push</li>
</ol>


<p>As with software, you can run into a race condition.
If somebody pushes changes between when you fetch and when you push, you ma=
y still overwrite them.
To avoid this, communicate with your team.
A simple =E2=80=9Cdon=E2=80=99t push anything on <yourbranch> for a minute=
=E2=80=9D, followed up by an =E2=80=9Call clear=E2=80=9D should do the tric=
k.</yourbranch></p>

<h3>Overwriting Other Branches</h3>

<p>When you push and pull, Git can use remote tracking branches (see above)=
 to infer which remote branch you want to push/pull from.
This is generally ok for normal push/pull activity, but when you force push=
, it can be dangerous.</p>

<p>By default, Git responds to <code>git push</code> by pushing <em>all</em=
> branches that exist on both your local machine and the remote server.
This means, if you have commits on master and my-feature-branch, and you ru=
n <code>git push</code>, it will push your changes from both branches at on=
ce.</p>

<p>In Git 2.0, this behavior was changed to only push the current branch, b=
ut older versions still have this unexpected behavior.
To fix it, run the following command:</p>

<p><code>git config --global push.default simple</code></p>

<p>Now if you run <code>git push</code>, it will only try to push your curr=
ent branch.</p>

<p>The default push behavior becomes especially dangerous when you force pu=
sh.
If, for example, you run <code>git push -f</code>, and your master branch i=
s behind the remote server=E2=80=99s master,
you may accidentally remove commits from master.</p>

<p>For this reason, I recommend two things:</p>

<ol>
<li>Configure push.default with the safer <code>simple</code> setting</li>
<li>Always explicitly state the remote and branch name when you force push:=
 <code>git push -f origin my-feature-branch</code></li>
</ol>


<h2>In Conclusion</h2>

<p>Hopefully this gives you a good overview of the how/why/when of force pu=
shing.</p>

<p>If you haven=E2=80=99t already, be sure to read the section on force pus=
h pitfalls.
They=E2=80=99re important to understand, and they=E2=80=99re the main reaso=
n I wrote this post.</p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-08-12T23:26:08-07:00" pubdate=3D"" data-updated=3D"t=
rue">Aug 12<span>th</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/git/">Git</=
a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/07/28/test-your-api-with-supertest/=
">
	=09
			How to Test Your API With Supertest</a>
	</h2>
	<div class=3D"entry-content">
		<p><a href=3D"https://npmjs.org/package/supertest">Supertest</a> is a fan=
tastic tool for testing your API.
Here=E2=80=99s how I use it to test APIs.</p>

<h2>Setup</h2>

<p>You can configure supertest in a couple ways.
If you=E2=80=99re testing an external site, you can configure supertest wit=
h the site=E2=80=99s base url:</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">request</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'supertest'</span><span class=3D"p">)(</span=
><span class=3D"s1">'http://example.com/'</span><span class=3D"p">);</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>If you=E2=80=99re testing an Express app, you can pass the app to supert=
est, and let it worry about setup/teardown of your site.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">myApp</span> <sp=
an class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p=
">(</span><span class=3D"s1">'../app.js'</span><span class=3D"p">);</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">request</span> <span class=3D"o">=3D</span> <span class=3D"nx">require</s=
pan><span class=3D"p">(</span><span class=3D"s1">'supertest'</span><span cl=
ass=3D"p">)(</span><span class=3D"nx">myApp</span><span class=3D"p">);</spa=
n>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>The great thing about this approach is that supertest takes care of star=
ting up and shutting down your site on a random port.
This allows you to just write your tests, without worrying about starting a=
pps, conflicting ports, etc.</p>

<h2>Writing a Test</h2>

<p>Once you=E2=80=99ve imported supertest, it=E2=80=99s quite simple to use=
.
In my examples, I=E2=80=99ll be using the test framework provided by <a hre=
f=3D"https://npmjs.org/package/mocha">Mocha</a>.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">describe</span><span class=3D"p">(</span><span=
 class=3D"s1">'my api'</span><span class=3D"p">,</span> <span class=3D"kd">=
function</span><span class=3D"p">()</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"nx">it</span><span class=3D"=
p">(</span><span class=3D"s1">'returns hello world'</span><span class=3D"p"=
>,</span> <span class=3D"kd">function</span><span class=3D"p">(</span><span=
 class=3D"nx">done</span><span class=3D"p">)</span> <span class=3D"p">{</sp=
an>
</span><span class=3D"line">        <span class=3D"nx">request</span><span =
class=3D"p">.</span>
</span><span class=3D"line">            <span class=3D"p">.</span><span cla=
ss=3D"nx">get</span><span class=3D"p">(</span><span class=3D"s1">'/'</span>=
<span class=3D"p">)</span>
</span><span class=3D"line">            <span class=3D"p">.</span><span cla=
ss=3D"nx">expect</span><span class=3D"p">(</span><span class=3D"s1">'Hello,=
 World!'</span><span class=3D"p">,</span> <span class=3D"nx">done</span><sp=
an class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>This is about as simple as the tests get.
We call the root of the site, and expect the response body to equal =E2=80=
=9CHello, World!=E2=80=9D.</p>

<p>Since the request is async, we take in a =E2=80=9Cdone=E2=80=9D paramete=
r (which Mocha passes to us).
We call that at the end of the test when we=E2=80=99ve actually had a chanc=
e to verify the server response.</p>

<p>You can easily test a JSON response with supertest:</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">request</span><span class=3D"p">.</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">get</span><span class=3D"p">(</span><span class=3D"s1">'/'</span><span cl=
ass=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">expect</span><span class=3D"p">({</span><span class=3D"nx">message</span>=
<span class=3D"o">:</span> <span class=3D"s2">"Hello, World!"</span><span c=
lass=3D"p">},</span> <span class=3D"nx">done</span><span class=3D"p">);</sp=
an>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Headers are also simple to verify.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">request</span><span class=3D"p">.</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">get</span><span class=3D"p">(</span><span class=3D"s1">'/foo'</span><span=
 class=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">expect</span><span class=3D"p">(</span><span class=3D"s1">'Content-Type'<=
/span><span class=3D"p">,</span> <span class=3D"s1">'application/json'</spa=
n><span class=3D"p">,</span> <span class=3D"nx">done</span><span class=3D"p=
">);</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Status codes are even easier.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">request</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">get</span><span class=3D"p">(</span><span class=3D"s1">'/some-error-route=
'</span><span class=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">expect</span><span class=3D"p">(</span><span class=3D"mi">500</span><span=
 class=3D"p">,</span> <span class=3D"s1">'Oops. Something went wrong'</span=
><span class=3D"p">,</span> <span class=3D"nx">done</span><span class=3D"p"=
>);</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>You can do non-GET requests.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">user</span> <spa=
n class=3D"o">=3D</span> <span class=3D"p">{</span><span class=3D"nx">name<=
/span><span class=3D"o">:</span> <span class=3D"s1">'Bob'</span><span class=
=3D"p">};</span>
</span><span class=3D"line"><span class=3D"nx">request</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">post</span><span class=3D"p">(</span><span class=3D"s1">'/create-user'</s=
pan><span class=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">send</span><span class=3D"p">(</span><span class=3D"nx">user</span><span =
class=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">expect</span><span class=3D"p">({</span><span class=3D"nx">success</span>=
<span class=3D"o">:</span><span class=3D"kc">true</span><span class=3D"p">}=
,</span> <span class=3D"nx">done</span><span class=3D"p">);</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>You can set headers for the request.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">request</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">get</span><span class=3D"p">(</span><span class=3D"s1">'/foo'</span><span=
 class=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">set</span><span class=3D"p">(</span><span class=3D"s1">'Accept'</span><sp=
an class=3D"p">,</span> <span class=3D"s1">'text/plain'</span><span class=
=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">expect</span><span class=3D"p">(</span><span class=3D"s1">'Content-Type'<=
/span><span class=3D"p">,</span> <span class=3D"s1">'text/plain'</span><spa=
n class=3D"p">,</span> <span class=3D"nx">done</span><span class=3D"p">);</=
span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>You can match regular expressions against headers and bodies.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">request</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">get</span><span class=3D"p">(</span><span class=3D"s1">'/redirect'</span>=
<span class=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">expect</span><span class=3D"p">(</span><span class=3D"s1">'Location'</spa=
n><span class=3D"o">:</span> <span class=3D"sr">/\/destination/</span><span=
 class=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">expect</span><span class=3D"p">(</span><span class=3D"mi">301</span><span=
 class=3D"p">,</span> <span class=3D"nx">done</span><span class=3D"p">);</s=
pan>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>If you need to do multiple requests in series, you can chain the =E2=80=
=9Cexpect=E2=80=9D callbacks:</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
<span class=3D"line-number">21</span>
<span class=3D"line-number">22</span>
<span class=3D"line-number">23</span>
<span class=3D"line-number">24</span>
<span class=3D"line-number">25</span>
<span class=3D"line-number">26</span>
<span class=3D"line-number">27</span>
<span class=3D"line-number">28</span>
<span class=3D"line-number">29</span>
<span class=3D"line-number">30</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"c1">// Kick things off</span>
</span><span class=3D"line"><span class=3D"nx">purgeUsers</span><span class=
=3D"p">();</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">function</span> <span class=
=3D"nx">purgeUsers</span><span class=3D"p">()</span> <span class=3D"p">{</s=
pan>
</span><span class=3D"line">    <span class=3D"nx">request</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">get</span><span class=3D"p">(</span><span class=3D"s1">'/users/purg=
e'</span><span class=3D"p">)</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">expect</span><span class=3D"p">({</span><span class=3D"nx">success<=
/span><span class=3D"o">:</span><span class=3D"kc">true</span><span class=
=3D"p">},</span> <span class=3D"nx">checkNoUsers</span><span class=3D"p">);=
</span>
</span><span class=3D"line"><span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">function</span> <span class=
=3D"nx">checkNoUsers</span><span class=3D"p">(</span><span class=3D"nx">err=
</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"nx">done</span><span class=3D"p">(</span><span class=3D"nx">err</spa=
n><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"nx">request</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">get</span><span class=3D"p">(</span><span class=3D"s1">'/users'</sp=
an><span class=3D"p">)</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">expect</span><span class=3D"p">([],</span> <span class=3D"nx">addUs=
er</span><span class=3D"p">);</span>
</span><span class=3D"line"><span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">function</span> <span class=
=3D"nx">addUser</span><span class=3D"p">()</span> <span class=3D"p">{</span=
>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"nx">done</span><span class=3D"p">(</span><span class=3D"nx">err</spa=
n><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"nx">request</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">post</span><span class=3D"p">(</span><span class=3D"s1">'/users'</s=
pan><span class=3D"p">)</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">send</span><span class=3D"p">({</span><span class=3D"nx">name</span=
><span class=3D"o">:</span> <span class=3D"s1">'Bob'</span><span class=3D"p=
">})</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">expect</span><span class=3D"p">({</span><span class=3D"nx">success<=
/span><span class=3D"o">:</span><span class=3D"kc">true</span><span class=
=3D"p">},</span> <span class=3D"nx">checkUsers</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">function</span> <span class=
=3D"nx">checkUsers</span><span class=3D"p">(</span><span class=3D"nx">err</=
span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"nx">done</span><span class=3D"p">(</span><span class=3D"nx">err</spa=
n><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"nx">request</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">get</span><span class=3D"p">(</span><span class=3D"s1">'/users'</sp=
an><span class=3D"p">)</span>
</span><span class=3D"line">        <span class=3D"p">.</span><span class=
=3D"nx">expect</span><span class=3D"p">([{</span><span class=3D"nx">name</s=
pan><span class=3D"o">:</span> <span class=3D"s1">'Bob'</span><span class=
=3D"p">}],</span> <span class=3D"nx">done</span><span class=3D"p">);</span>
</span><span class=3D"line"><span class=3D"p">}</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Finally, if you need to do some custom processing on a result, use the <=
code>.end()</code> function.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">assert</span> <s=
pan class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"=
p">(</span><span class=3D"s1">'assert'</span><span class=3D"p">);</span>
</span><span class=3D"line"><span class=3D"nx">request</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">get</span><span class=3D"p">(</span><span class=3D"s1">'/foo'</span><span=
 class=3D"p">)</span>
</span><span class=3D"line">    <span class=3D"p">.</span><span class=3D"nx=
">end</span><span class=3D"p">(</span><span class=3D"kd">function</span><sp=
an class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</sp=
an> <span class=3D"nx">result</span><span class=3D"p">)</span> <span class=
=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">assert</span><span c=
lass=3D"p">.</span><span class=3D"nx">equal</span><span class=3D"p">(</span=
><span class=3D"nx">result</span><span class=3D"p">.</span><span class=3D"n=
x">body</span><span class=3D"p">.</span><span class=3D"nx">foo</span><span =
class=3D"p">,</span> <span class=3D"s1">'Bar'</span><span class=3D"p">);</s=
pan>
</span><span class=3D"line">        <span class=3D"nx">done</span><span cla=
ss=3D"p">();</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>There are probably more features that I=E2=80=99m not aware of, but this=
 is a rundown of the ones I=E2=80=99m most familiar with.</p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-07-28T14:18:23-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jul 28<span>th</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/node/">Node=
</a>, <a class=3D"category" href=3D"https://willi.am/blog/categories/testin=
g/">Testing</a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/07/16/storing-data-as-newline-delim=
ited-json-entries/">
	=09
			Storing Data as Newline Delimited JSON Entries</a>
	</h2>
	<div class=3D"entry-content">
		<p>You can store data as newline delimited JSON entries.
Since JSON encodes newline characters, you can use newlines to separate ent=
ries.</p>

<p>For more details, read on.</p>

<h2>Exporting Large Data</h2>

<p>In a recent project, I needed to export data, and then import it into an=
other system.
I decided to go with JSON as the export format, because it was structured d=
ata.
The problem was, the data could be extremely large, so loading it all into =
memory and generating a single JSON object wasn=E2=80=99t an option.</p>

<p>As a first solution to the problem, I considered =E2=80=9Cfake=E2=80=9D =
streaming to the file with the following pseudocode:</p>

<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">op=
en the file
</span><span class=3D"line">write "["
</span><span class=3D"line">foreach entry:
</span><span class=3D"line">  if not first entry:
</span><span class=3D"line">      write ","
</span><span class=3D"line">  write JSON serialized entry
</span><span class=3D"line">write "]"
</span><span class=3D"line">close the file</span></code></pre></td></tr></t=
body></table></div></figure>


<p>This got the job done, but what about when I import the data?
Since I wrote the data as one giant JSON array, I=E2=80=99d have to load th=
e entire thing to deserialize.
(In Node, I could use a streaming JSON parser, but this project was in PHP)=
.</p>

<p>This means there=E2=80=99s a limit to the amount of data I can import.
Even on a host where I can control PHP=E2=80=99s memory limit, there=E2=80=
=99s still a limitation to how much data can reasonably be loaded into memo=
ry.</p>

<h2>Exporting Newline Delimited Data</h2>

<p>I finally realized that I was missing something important.
JSON serializes newlines as =E2=80=9C\n=E2=80=9D, which means actual newlin=
es can be safely used to delimit each JSON entry.
(Assuming you don=E2=80=99t =E2=80=9Cpretty print=E2=80=9D your JSON).</p>

<p>The new export method is as follows:</p>

<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">op=
en the file
</span><span class=3D"line">foreach entry:
</span><span class=3D"line">  if not first entry:
</span><span class=3D"line">      write newline
</span><span class=3D"line">  write JSON serialized entry
</span><span class=3D"line">close the file</span></code></pre></td></tr></t=
body></table></div></figure>


<p>Already simpler. Yay.</p>

<h2>Importing Newline Delimited Data</h2>

<p>Now that we=E2=80=99ve exported the data, it=E2=80=99s time to import it=
.
In PHP, this is still a challenge, because there=E2=80=99s no elegant solut=
ion for streams.
The closest you can get is the <a href=3D"http://php.net/manual/en/function=
.stream-get-line.php"><code>stream_get_line</code></a> function.
The problem with this function is that you have to specify a max length of =
characters to read.
If the line is longer than those characters, you have to detect that, and k=
eep searching until you get to the newline.
There=E2=80=99s a <a href=3D"http://php.net/manual/en/function.stream-get-l=
ine.php#109339">comment on the manual that outlines the solution</a>.</p>

<p>In pseudocode:</p>

<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">op=
en the file
</span><span class=3D"line">while get line from file:
</span><span class=3D"line">  import entry
</span><span class=3D"line">close the file</span></code></pre></td></tr></t=
body></table></div></figure>


<p>Again, fairly simple (ignoring caveats with =E2=80=9Cget line from file=
=E2=80=9D).
The great thing about this solution is that we only have to load at most on=
e entry at a time into memory.</p>

<h2>Bonus: Inspecting JSON Data From CLI</h2>

<p>If you want to inspect the data that you=E2=80=99ve exported, you can us=
e the handy =E2=80=9C<a href=3D"http://npmjs.org/package/json">json</a>=E2=
=80=9D tool (requires Node).
Not only does it pretty print, but it allows you to pull out specific data,=
 and supports newline delimited JSON entries with the <code>-g</code> flag.=
</p>

<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">$ =
cat test.json
</span><span class=3D"line">{"name":"alice"}
</span><span class=3D"line">{"name":"bob"}
</span><span class=3D"line">{"name":"eve"}</span></code></pre></td></tr></t=
body></table></div></figure>


<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">$ =
cat test.json | json -g
</span><span class=3D"line">[
</span><span class=3D"line">  {
</span><span class=3D"line">    "name": "alice"
</span><span class=3D"line">  },
</span><span class=3D"line">  {
</span><span class=3D"line">    "name": "bob"
</span><span class=3D"line">  },
</span><span class=3D"line">  {
</span><span class=3D"line">    "name": "eve"
</span><span class=3D"line">  }
</span><span class=3D"line">]</span></code></pre></td></tr></tbody></table>=
</div></figure>


<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">$ =
cat test.json | json -ga name
</span><span class=3D"line">alice
</span><span class=3D"line">bob
</span><span class=3D"line">eve</span></code></pre></td></tr></tbody></tabl=
e></div></figure>


<figure class=3D"code"><div class=3D"highlight"><table><tbody><tr><td class=
=3D"gutter"><pre class=3D"line-numbers"><span class=3D"line-number">1</span=
>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
</pre></td><td class=3D"code"><pre><code class=3D""><span class=3D"line">$ =
cat test.json | json -ga nameLength name -e 'this.nameLength =3D this.name.=
length'
</span><span class=3D"line">5 alice
</span><span class=3D"line">3 bob
</span><span class=3D"line">3 eve</span></code></pre></td></tr></tbody></ta=
ble></div></figure>


<p><a href=3D"http://trentm.com/json/">Full Documentation</a></p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-07-16T13:48:29-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jul 16<span>th</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/json/">JSON=
</a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/07/09/azure-blob-storage-and-node-a=
ll-together/">
	=09
			Azure Blob Storage and Node: All Together</a>
	</h2>
	<div class=3D"entry-content">
		<p><strong>This is part of a series on working with Azure Blob Storage in=
 Node.</strong></p>

<ol>
<li><a href=3D"https://willi.am/blog/2014/06/30/azure-blob-storage-and-node=
/">Introduction</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-and-node=
-first-steps/">First Steps</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/02/azure-blob-storage-and-node=
-creating-blobs/">Creating Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/03/azure-blob-storage-and-node=
-downloading-blobs/">Downloading Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/07/azure-blob-storage-and-node=
-listing-blobs/">Listing Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/08/azure-blob-storage-and-node=
-blob-metadata/">Blob Metadata</a></li>
<li><strong>All Together</strong></li>
</ol>


<h1>Building a Complete Service Over Azure Blob Storage</h1>

<p>In the last post, we covered <a href=3D"https://willi.am/blog/2014/07/08=
/azure-blob-storage-and-node-blob-metadata/">working with blob metadata</a>=
.
In this final post, we=E2=80=99ll talk about putting all the previous piece=
s together to create a service that is backed by blob storage.</p>

<p>As a concrete example, we=E2=80=99ll implement the image serving portion=
 of <a href=3D"http://placebacon.net/">placebacon</a>.
To keep things simple, we won=E2=80=99t go into the Jade views, just the pa=
rt that actually serves images.</p>

<h3>Creating an Node Server</h3>

<p>We=E2=80=99ll use Express to serve the images.
We could work with any number of HTTP frameworks in Node, but Express is pr=
etty simple to understand, so that=E2=80=99s what we=E2=80=99ll use.</p>

<p>First, create a package.json file so we can save our npm dependencies.</=
p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
</pre></td><td class=3D"code"><pre><code class=3D"bash"><span class=3D"line=
">npm init
</span><span class=3D"line"><span class=3D"c"># Follow the prompts</span>
</span><span class=3D"line"><span class=3D"c"># If in doubt, keep the defau=
lts</span>
</span><span class=3D"line"><span class=3D"c"># For "entry point", enter "s=
erver.js"</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Next install some dependencies.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
</pre></td><td class=3D"code"><pre><code class=3D"bash"><span class=3D"line=
">npm install --save express azure-storage debug
</span></code></pre></td></tr></tbody></table></div></figure>


<p>The =E2=80=9Cexpress=E2=80=9D and =E2=80=9Cazure-storage=E2=80=9D packag=
es should be pretty self-explanatory.
The =E2=80=9Cdebug=E2=80=9D prints debug output, and can be a selectively t=
urned on and off.
We=E2=80=99ll talk about how to use =E2=80=9Cdebug=E2=80=9D in a bit.</p>

<p>When we initialized the package.json, we set server.js as the entry poin=
t.
Let=E2=80=99s create that.
(Skip ahead if you=E2=80=99re familiar with Express)</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">debug</span> <sp=
an class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p=
">(</span><span class=3D"s1">'debug'</span><span class=3D"p">)(</span><span=
 class=3D"s1">'placebacon:server'</span><span class=3D"p">),</span>
</span><span class=3D"line">    <span class=3D"nx">storage</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p">(</s=
pan><span class=3D"s1">'azure-storage'</span><span class=3D"p">),</span>
</span><span class=3D"line">    <span class=3D"nx">http</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p">(</spa=
n><span class=3D"s1">'http'</span><span class=3D"p">),</span>
</span><span class=3D"line">    <span class=3D"nx">util</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p">(</spa=
n><span class=3D"s1">'util'</span><span class=3D"p">),</span>
</span><span class=3D"line">    <span class=3D"nx">express</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p">(</s=
pan><span class=3D"s1">'express'</span><span class=3D"p">),</span>
</span><span class=3D"line">    <span class=3D"nx">app</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">express</span><span class=3D"p">();</s=
pan>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"nx">app</span><span class=3D"p">=
.</span><span class=3D"nx">set</span><span class=3D"p">(</span><span class=
=3D"s1">'port'</span><span class=3D"p">,</span> <span class=3D"nx">process<=
/span><span class=3D"p">.</span><span class=3D"nx">env</span><span class=3D=
"p">.</span><span class=3D"nx">PORT</span> <span class=3D"o">||</span> <spa=
n class=3D"mi">3000</span><span class=3D"p">);</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"c1">// TODO: add server routes</=
span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">server</span> <span class=3D"o">=3D</span> <span class=3D"nx">app</span><=
span class=3D"p">.</span><span class=3D"nx">listen</span><span class=3D"p">=
(</span><span class=3D"nx">app</span><span class=3D"p">.</span><span class=
=3D"nx">get</span><span class=3D"p">(</span><span class=3D"s1">'port'</span=
><span class=3D"p">),</span> <span class=3D"kd">function</span><span class=
=3D"p">()</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"nx">debug</span><span class=
=3D"p">(</span><span class=3D"s1">'Placebacon server listening on port %d'<=
/span><span class=3D"p">,</span> <span class=3D"nx">server</span><span clas=
s=3D"p">.</span><span class=3D"nx">address</span><span class=3D"p">().</spa=
n><span class=3D"nx">port</span><span class=3D"p">);</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>We=E2=80=99re requiring the =E2=80=9Cdebug=E2=80=9D package, then callin=
g the function it exports with =E2=80=98placebacon:server=E2=80=99.
This tells =E2=80=9Cdebug=E2=80=9D to only print log output if the DEBUG en=
vironment variable matches =E2=80=98placebacon:server=E2=80=99.
For example:</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
</pre></td><td class=3D"code"><pre><code class=3D"bash"><span class=3D"line=
">node server.js
</span><span class=3D"line"><span class=3D"c"># [no output]</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"nv">DEBUG</span><span class=3D"o=
">=3D</span>placebacon:server node server.js
</span><span class=3D"line"><span class=3D"c"># =3D&gt; Placebacon server l=
istening on port 3000</span>
</span><span class=3D"line">
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"nv">DEBUG</span><span class=3D"o=
">=3D</span>placebacon:* node server.js
</span><span class=3D"line"><span class=3D"c"># =3D&gt; Placebacon server l=
istening on port 3000</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>As you can see from the above examples, =E2=80=9Cdebug=E2=80=9D makes it=
 easy to turn debugging statements on and off without modifying your code.<=
/p>

<h3>Defining the Route</h3>

<p>Next let=E2=80=99s add a route.
In the javascript snippet above, replace the =E2=80=9CTODO=E2=80=9D line wi=
th the following code.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
<span class=3D"line-number">21</span>
<span class=3D"line-number">22</span>
<span class=3D"line-number">23</span>
<span class=3D"line-number">24</span>
<span class=3D"line-number">25</span>
<span class=3D"line-number">26</span>
<span class=3D"line-number">27</span>
<span class=3D"line-number">28</span>
<span class=3D"line-number">29</span>
<span class=3D"line-number">30</span>
<span class=3D"line-number">31</span>
<span class=3D"line-number">32</span>
<span class=3D"line-number">33</span>
<span class=3D"line-number">34</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"c1">// Matches /100/200 -&gt; 100x200 image</span>
</span><span class=3D"line"><span class=3D"c1">// Matches /100     -&gt; 10=
0x100 image</span>
</span><span class=3D"line"><span class=3D"nx">app</span><span class=3D"p">=
.</span><span class=3D"nx">get</span><span class=3D"p">(</span><span class=
=3D"s1">'/:width/:height?'</span><span class=3D"p">,</span> <span class=3D"=
kd">function</span><span class=3D"p">(</span><span class=3D"nx">req</span><=
span class=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p">,<=
/span> <span class=3D"nx">next</span><span class=3D"p">)</span> <span class=
=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">width</span> <span class=3D"o">=3D</span> <span class=3D"nb">parseI=
nt</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">.</span><span class=3D"nx">params</span><span class=3D"p">.</span><s=
pan class=3D"nx">width</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">height</span> <span class=3D"o">=3D</span> <span class=3D"nx">req</=
span><span class=3D"p">.</span><span class=3D"nx">params</span><span class=
=3D"p">.</span><span class=3D"nx">height</span> <span class=3D"o">?</span> =
<span class=3D"nb">parseInt</span><span class=3D"p">(</span><span class=3D"=
nx">req</span><span class=3D"p">.</span><span class=3D"nx">params</span><sp=
an class=3D"p">.</span><span class=3D"nx">height</span><span class=3D"p">)<=
/span> <span class=3D"o">:</span> <span class=3D"nx">width</span><span clas=
s=3D"p">;</span>
</span><span class=3D"line">
</span><span class=3D"line">    <span class=3D"c1">// If width or height is=
n't a number, go to next route</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nb">isNaN</span><span class=3D"p">(</span><span c=
lass=3D"nx">width</span><span class=3D"p">)</span> <span class=3D"o">||</sp=
an> <span class=3D"nb">isNaN</span><span class=3D"p">(</span><span class=3D=
"nx">height</span><span class=3D"p">))</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">next</span><span cla=
ss=3D"p">();</span>
</span><span class=3D"line">        <span class=3D"k">return</span><span cl=
ass=3D"p">;</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">selectedImage</span> <span class=3D"o">=3D</span> <span class=3D"mi=
">0</span><span class=3D"p">;</span> <span class=3D"c1">// TODO: choose a r=
andom image</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">urlTemplate</span> <span class=3D"o">=3D</span> <span class=3D"s1">=
'http://placebacon.net/%d/%d?image=3D%d'</span><span class=3D"p">;</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">imageUrl</span> <span class=3D"o">=3D</span> <span class=3D"nx">uti=
l</span><span class=3D"p">.</span><span class=3D"nx">format</span><span cla=
ss=3D"p">(</span><span class=3D"nx">urlTemplate</span><span class=3D"p">,</=
span> <span class=3D"nx">width</span><span class=3D"p">,</span> <span class=
=3D"nx">height</span><span class=3D"p">,</span> <span class=3D"nx">selected=
Image</span><span class=3D"p">);</span>
</span><span class=3D"line">
</span><span class=3D"line">
</span><span class=3D"line">    <span class=3D"nx">debug</span><span class=
=3D"p">(</span><span class=3D"s1">'Fetching from %s'</span><span class=3D"p=
">,</span> <span class=3D"nx">imageUrl</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"nx">http</span><span class=
=3D"p">.</span><span class=3D"nx">get</span><span class=3D"p">(</span><span=
 class=3D"nx">imageUrl</span><span class=3D"p">,</span> <span class=3D"kd">=
function</span><span class=3D"p">(</span><span class=3D"nx">imageResponse</=
span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"mi">200</span> <span class=3D"o">!=3D=3D</spa=
n> <span class=3D"nx">imageResponse</span><span class=3D"p">.</span><span c=
lass=3D"nx">statusCode</span><span class=3D"p">)</span> <span class=3D"p">{=
</span>
</span><span class=3D"line">            <span class=3D"nx">debug</span><spa=
n class=3D"p">(</span><span class=3D"s1">'Unexpected response: %d - %s'</sp=
an><span class=3D"p">,</span>
</span><span class=3D"line">                  <span class=3D"nx">imageRespo=
nse</span><span class=3D"p">.</span><span class=3D"nx">statusCode</span><sp=
an class=3D"p">,</span> <span class=3D"nx">imageResponse</span><span class=
=3D"p">.</span><span class=3D"nx">statusMessage</span><span class=3D"p">);<=
/span>
</span><span class=3D"line">            <span class=3D"nx">res</span><span =
class=3D"p">.</span><span class=3D"nx">send</span><span class=3D"p">(</span=
><span class=3D"mi">502</span><span class=3D"p">,</span> <span class=3D"nx"=
>imageResponse</span><span class=3D"p">.</span><span class=3D"nx">statusMes=
sage</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"k">return</span><spa=
n class=3D"p">;</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">imageResponse</s=
pan><span class=3D"p">.</span><span class=3D"nx">pipe</span><span class=3D"=
p">(</span><span class=3D"nx">res</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">}).</span><span class=3D"=
nx">on</span><span class=3D"p">(</span><span class=3D"s1">'error'</span><sp=
an class=3D"p">,</span> <span class=3D"kd">function</span><span class=3D"p"=
>(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"s1">'Error fetching from %s: %j'</span><span class=3D"p">,=
</span> <span class=3D"nx">imageUrl</span><span class=3D"p">,</span> <span =
class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">send</span><span class=3D"p">(</span><sp=
an class=3D"mi">502</span><span class=3D"p">,</span> <span class=3D"nx">uti=
l</span><span class=3D"p">.</span><span class=3D"nx">format</span><span cla=
ss=3D"p">(</span><span class=3D"s2">"Error downloading %s: %s"</span><span =
class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"nx">imageUrl</span><=
span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"nx">e</span><span cl=
ass=3D"p">.</span><span class=3D"nx">message</span><span class=3D"p">));</s=
pan>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>At this point we have a fairly functional non-caching proxy.
Let=E2=80=99s briefly go over the code.</p>

<p>First, the route is defined as <code>/:width/:height?</code>.
This tells Express that we want to match routes with one or two parts (the =
question mark makes the second part optional).
Those two parts will be mapped to <code>req.params.width</code> and <code>r=
eq.params.height</code>.
If the second part is left off, <code>req.params.height</code> will be unde=
fined.</p>

<p>Inside our route handler, we first parse the width and height as integer=
s.
If the height is missing, it defaults to the value of =E2=80=9Cwidth=E2=80=
=9D.
This allows users to use /100 as a shortcut for /100/100.</p>

<p>Next we check that width and height are actually integers.
If they aren=E2=80=99t, we call =E2=80=9Cnext()=E2=80=9D, to pass control o=
nto the next route handler.
In this case, there isn=E2=80=99t another handler, so Express will send a 4=
04.</p>

<p>Next we select an image.
In this sample, it=E2=80=99s hardcoded to zero, but normally we=E2=80=99ll =
want to select a random image based on width and height.
We=E2=80=99ll add that later.</p>

<p>Based on the image selection and resolution, we construct a URL to our b=
ackend.
In the sample it points at placebacon.com to make it easy to run the sample=
, but normally you=E2=80=99d point this at whatever service you=E2=80=99re =
using to resize your images.
You=E2=80=99ll also probably want to put the =E2=80=9CurlTemplate=E2=80=9D =
value in a config, but for the sake of code sample simplicity, it=E2=80=99s=
 hardcoded</p>

<p>Finally, we make an http request to the image url and pipe the response =
to our client.
The rest of the code is just error handling.</p>

<h3>Using Blob Storage</h3>

<p>In the code samples above, we don=E2=80=99t actually use blob storage.
Since blob storage is what this series is all about, let=E2=80=99s integrat=
e it as a caching layer.</p>

<p>Resizing and cropping images can be an expensive operation.
On placebacon, it can take a several seconds.
Obviously that=E2=80=99s not acceptible for every request, so generated ima=
ges need to be cached to speed up responses.</p>

<p>First, make sure you=E2=80=99ve set up your site to connect to to blob s=
torage.
The =E2=80=9C<a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage=
-and-node-first-steps/">First Steps</a>=E2=80=9D post in this series has in=
structions on how to do that.</p>

<p>Next, let=E2=80=99s make sure the blob container exists.</p>

<p>At the top of =E2=80=9Cserver.js=E2=80=9D, right below the requires, add=
 the container creation boilerplate we saw in the previous posts.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">blobService</spa=
n> <span class=3D"o">=3D</span> <span class=3D"nx">storage</span><span clas=
s=3D"p">.</span><span class=3D"nx">createBlobService</span><span class=3D"p=
">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containerName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'pla=
ceholder-images'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">createContainerIfNotExists</span><span c=
lass=3D"p">(</span><span class=3D"nx">containerName</span><span class=3D"p"=
>,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">result</span><span class=3D"p">,</span> <span class=3D"nx"=
>response</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't create container %s"</span><span class=3D"=
p">,</span> <span class=3D"nx">containerName</span><span class=3D"p">);</sp=
an>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"k">if</span> <span c=
lass=3D"p">(</span><span class=3D"nx">result</span><span class=3D"p">)</spa=
n> <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">console</spa=
n><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">=
(</span><span class=3D"s1">'Container %s created'</span><span class=3D"p">,=
</span> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">console</spa=
n><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">=
(</span><span class=3D"s1">'Container %s already exists'</span><span class=
=3D"p">,</span> <span class=3D"nx">containerName</span><span class=3D"p">);=
</span>
</span><span class=3D"line">            <span class=3D"p">}</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Now in the route handler, we can interact with the blob storage containe=
r.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
<span class=3D"line-number">21</span>
<span class=3D"line-number">22</span>
<span class=3D"line-number">23</span>
<span class=3D"line-number">24</span>
<span class=3D"line-number">25</span>
<span class=3D"line-number">26</span>
<span class=3D"line-number">27</span>
<span class=3D"line-number">28</span>
<span class=3D"line-number">29</span>
<span class=3D"line-number">30</span>
<span class=3D"line-number">31</span>
<span class=3D"line-number">32</span>
<span class=3D"line-number">33</span>
<span class=3D"line-number">34</span>
<span class=3D"line-number">35</span>
<span class=3D"line-number">36</span>
<span class=3D"line-number">37</span>
<span class=3D"line-number">38</span>
<span class=3D"line-number">39</span>
<span class=3D"line-number">40</span>
<span class=3D"line-number">41</span>
<span class=3D"line-number">42</span>
<span class=3D"line-number">43</span>
<span class=3D"line-number">44</span>
<span class=3D"line-number">45</span>
<span class=3D"line-number">46</span>
<span class=3D"line-number">47</span>
<span class=3D"line-number">48</span>
<span class=3D"line-number">49</span>
<span class=3D"line-number">50</span>
<span class=3D"line-number">51</span>
<span class=3D"line-number">52</span>
<span class=3D"line-number">53</span>
<span class=3D"line-number">54</span>
<span class=3D"line-number">55</span>
<span class=3D"line-number">56</span>
<span class=3D"line-number">57</span>
<span class=3D"line-number">58</span>
<span class=3D"line-number">59</span>
<span class=3D"line-number">60</span>
<span class=3D"line-number">61</span>
<span class=3D"line-number">62</span>
<span class=3D"line-number">63</span>
<span class=3D"line-number">64</span>
<span class=3D"line-number">65</span>
<span class=3D"line-number">66</span>
<span class=3D"line-number">67</span>
<span class=3D"line-number">68</span>
<span class=3D"line-number">69</span>
<span class=3D"line-number">70</span>
<span class=3D"line-number">71</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"c1">// Matches /100/200 -&gt; 100x200 image</span>
</span><span class=3D"line"><span class=3D"c1">// Matches /100     -&gt; 10=
0x100 image</span>
</span><span class=3D"line"><span class=3D"nx">app</span><span class=3D"p">=
.</span><span class=3D"nx">get</span><span class=3D"p">(</span><span class=
=3D"s1">'/:width/:height?'</span><span class=3D"p">,</span> <span class=3D"=
kd">function</span><span class=3D"p">(</span><span class=3D"nx">req</span><=
span class=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p">,<=
/span> <span class=3D"nx">next</span><span class=3D"p">)</span> <span class=
=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">width</span> <span class=3D"o">=3D</span> <span class=3D"nb">parseI=
nt</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">.</span><span class=3D"nx">params</span><span class=3D"p">.</span><s=
pan class=3D"nx">width</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">height</span> <span class=3D"o">=3D</span> <span class=3D"nx">req</=
span><span class=3D"p">.</span><span class=3D"nx">params</span><span class=
=3D"p">.</span><span class=3D"nx">height</span> <span class=3D"o">?</span> =
<span class=3D"nb">parseInt</span><span class=3D"p">(</span><span class=3D"=
nx">req</span><span class=3D"p">.</span><span class=3D"nx">params</span><sp=
an class=3D"p">.</span><span class=3D"nx">height</span><span class=3D"p">)<=
/span> <span class=3D"o">:</span> <span class=3D"nx">width</span><span clas=
s=3D"p">;</span>
</span><span class=3D"line">
</span><span class=3D"line">    <span class=3D"c1">// If width or height is=
n't a number, go to next route</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nb">isNaN</span><span class=3D"p">(</span><span c=
lass=3D"nx">width</span><span class=3D"p">)</span> <span class=3D"o">||</sp=
an> <span class=3D"nb">isNaN</span><span class=3D"p">(</span><span class=3D=
"nx">height</span><span class=3D"p">))</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">next</span><span cla=
ss=3D"p">();</span>
</span><span class=3D"line">        <span class=3D"k">return</span><span cl=
ass=3D"p">;</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">selectedImage</span> <span class=3D"o">=3D</span> <span class=3D"mi=
">0</span><span class=3D"p">;</span> <span class=3D"c1">// TODO: choose a r=
andom image</span>
</span><span class=3D"line">
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">blobName</span> <span class=3D"o">=3D</span> <span class=3D"nx">uti=
l</span><span class=3D"p">.</span><span class=3D"nx">format</span><span cla=
ss=3D"p">(</span><span class=3D"s2">"%d-%d-%s"</span><span class=3D"p">,</s=
pan> <span class=3D"nx">width</span><span class=3D"p">,</span> <span class=
=3D"nx">height</span><span class=3D"p">,</span> <span class=3D"nx">selected=
Image</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"nx">blobService</span><span =
class=3D"p">.</span><span class=3D"nx">getBlobProperties</span><span class=
=3D"p">(</span>
</span><span class=3D"line">        <span class=3D"nx">containerName</span>=
<span class=3D"p">,</span>
</span><span class=3D"line">        <span class=3D"nx">blobName</span><span=
 class=3D"p">,</span>
</span><span class=3D"line">        <span class=3D"kd">function</span><span=
 class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span=
> <span class=3D"nx">properties</span><span class=3D"p">,</span> <span clas=
s=3D"nx">status</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"k">if</span> <span c=
lass=3D"p">(</span><span class=3D"nx">status</span><span class=3D"p">.</spa=
n><span class=3D"nx">isSuccessful</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">res</span><s=
pan class=3D"p">.</span><span class=3D"nx">header</span><span class=3D"p">(=
</span><span class=3D"s1">'Content-Type'</span><span class=3D"p">,</span> <=
span class=3D"s1">'image/jpeg'</span><span class=3D"p">);</span>
</span><span class=3D"line">                <span class=3D"nx">blobService<=
/span><span class=3D"p">.</span><span class=3D"nx">createReadStream</span><=
span class=3D"p">(</span><span class=3D"nx">containerName</span><span class=
=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">).</spa=
n><span class=3D"nx">pipe</span><span class=3D"p">(</span><span class=3D"nx=
">res</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"c1">// Blob does=
n't exist</span>
</span><span class=3D"line">                <span class=3D"c1">// Fetch it =
from the service</span>
</span><span class=3D"line">                <span class=3D"kd">var</span> <=
span class=3D"nx">urlTemplate</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"s1">'http://placebacon.net/%d/%d?image=3D%d'</span><span class=3D"p">=
;</span>
</span><span class=3D"line">                <span class=3D"kd">var</span> <=
span class=3D"nx">imageUrl</span> <span class=3D"o">=3D</span> <span class=
=3D"nx">util</span><span class=3D"p">.</span><span class=3D"nx">format</spa=
n><span class=3D"p">(</span>
</span><span class=3D"line">                    <span class=3D"nx">urlTempl=
ate</span><span class=3D"p">,</span>
</span><span class=3D"line">                    <span class=3D"nx">width</s=
pan><span class=3D"p">,</span>
</span><span class=3D"line">                    <span class=3D"nx">height</=
span><span class=3D"p">,</span>
</span><span class=3D"line">                    <span class=3D"nx">selected=
Image</span><span class=3D"p">);</span>
</span><span class=3D"line">
</span><span class=3D"line">                <span class=3D"nx">debug</span>=
<span class=3D"p">(</span><span class=3D"s1">'Fetching from %s'</span><span=
 class=3D"p">,</span> <span class=3D"nx">imageUrl</span><span class=3D"p">)=
;</span>
</span><span class=3D"line">                <span class=3D"nx">http</span><=
span class=3D"p">.</span><span class=3D"nx">get</span><span class=3D"p">(</=
span><span class=3D"nx">imageUrl</span><span class=3D"p">,</span> <span cla=
ss=3D"kd">function</span><span class=3D"p">(</span><span class=3D"nx">image=
Response</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"k">if</span>=
 <span class=3D"p">(</span><span class=3D"mi">200</span> <span class=3D"o">=
!=3D=3D</span> <span class=3D"nx">imageResponse</span><span class=3D"p">.</=
span><span class=3D"nx">statusCode</span><span class=3D"p">)</span> <span c=
lass=3D"p">{</span>
</span><span class=3D"line">                        <span class=3D"nx">debu=
g</span><span class=3D"p">(</span>
</span><span class=3D"line">                            <span class=3D"s1">=
'Unexpected response: %d - %s'</span><span class=3D"p">,</span>
</span><span class=3D"line">                            <span class=3D"nx">=
imageResponse</span><span class=3D"p">.</span><span class=3D"nx">statusCode=
</span><span class=3D"p">,</span>
</span><span class=3D"line">                            <span class=3D"nx">=
imageResponse</span><span class=3D"p">.</span><span class=3D"nx">statusMess=
age</span><span class=3D"p">);</span>
</span><span class=3D"line">                        <span class=3D"nx">res<=
/span><span class=3D"p">.</span><span class=3D"nx">send</span><span class=
=3D"p">(</span><span class=3D"mi">502</span><span class=3D"p">,</span> <spa=
n class=3D"nx">imageResponse</span><span class=3D"p">.</span><span class=3D=
"nx">statusMessage</span><span class=3D"p">);</span>
</span><span class=3D"line">                        <span class=3D"k">retur=
n</span><span class=3D"p">;</span>
</span><span class=3D"line">                    <span class=3D"p">}</span> =
<span class=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">
</span><span class=3D"line">                        <span class=3D"c1">// C=
reate a write  stream</span>
</span><span class=3D"line">                        <span class=3D"kd">var<=
/span> <span class=3D"nx">blob</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"nx">blobService</span><span class=3D"p">.</span><span class=3D"nx">c=
reateWriteStreamToBlockBlob</span><span class=3D"p">(</span>
</span><span class=3D"line">                            <span class=3D"nx">=
containerName</span><span class=3D"p">,</span>
</span><span class=3D"line">                            <span class=3D"nx">=
blobName</span><span class=3D"p">,</span>
</span><span class=3D"line">                            <span class=3D"p">{=
</span> <span class=3D"nx">contentType</span><span class=3D"o">:</span> <sp=
an class=3D"s1">'image/jpeg'</span> <span class=3D"p">},</span>
</span><span class=3D"line">                            <span class=3D"kd">=
function</span><span class=3D"p">(</span><span class=3D"nx">error</span><sp=
an class=3D"p">,</span> <span class=3D"nx">result</span><span class=3D"p">,=
</span> <span class=3D"nx">response</span><span class=3D"p">){</span>
</span><span class=3D"line">                                <span class=3D"=
k">if</span><span class=3D"p">(</span><span class=3D"nx">error</span><span =
class=3D"p">){</span>
</span><span class=3D"line">                                    <span class=
=3D"nx">console</span><span class=3D"p">.</span><span class=3D"nx">log</spa=
n><span class=3D"p">(</span><span class=3D"s2">"Couldn't upload %s"</span><=
span class=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"=
p">);</span>
</span><span class=3D"line">                                    <span class=
=3D"nx">console</span><span class=3D"p">.</span><span class=3D"nx">error</s=
pan><span class=3D"p">(</span><span class=3D"nx">error</span><span class=3D=
"p">);</span>
</span><span class=3D"line">                                <span class=3D"=
p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                                    <span class=
=3D"nx">console</span><span class=3D"p">.</span><span class=3D"nx">log</spa=
n><span class=3D"p">(</span><span class=3D"s1">'Blob %s uploaded'</span><sp=
an class=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p"=
>);</span>
</span><span class=3D"line">                                <span class=3D"=
p">}</span>
</span><span class=3D"line">                            <span class=3D"p">}=
);</span>
</span><span class=3D"line">
</span><span class=3D"line">                        <span class=3D"nx">imag=
eResponse</span><span class=3D"p">.</span><span class=3D"nx">pipe</span><sp=
an class=3D"p">(</span><span class=3D"nx">blob</span><span class=3D"p">);</=
span>
</span><span class=3D"line">
</span><span class=3D"line">                        <span class=3D"nx">res<=
/span><span class=3D"p">.</span><span class=3D"nx">header</span><span class=
=3D"p">(</span><span class=3D"s1">'Content-Type'</span><span class=3D"p">,<=
/span> <span class=3D"s1">'image/jpeg'</span><span class=3D"p">);</span>
</span><span class=3D"line">                        <span class=3D"nx">imag=
eResponse</span><span class=3D"p">.</span><span class=3D"nx">pipe</span><sp=
an class=3D"p">(</span><span class=3D"nx">res</span><span class=3D"p">);</s=
pan>
</span><span class=3D"line">                    <span class=3D"p">}</span>
</span><span class=3D"line">                <span class=3D"p">}).</span><sp=
an class=3D"nx">on</span><span class=3D"p">(</span><span class=3D"s1">'erro=
r'</span><span class=3D"p">,</span> <span class=3D"kd">function</span><span=
 class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span=
> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">error</span><span class=
=3D"p">(</span><span class=3D"s1">'Error fetching from %s: %j'</span><span =
class=3D"p">,</span> <span class=3D"nx">imageUrl</span><span class=3D"p">,<=
/span> <span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">                    <span class=3D"nx">res</spa=
n><span class=3D"p">.</span><span class=3D"nx">send</span><span class=3D"p"=
>(</span><span class=3D"mi">502</span><span class=3D"p">,</span> <span clas=
s=3D"nx">util</span><span class=3D"p">.</span><span class=3D"nx">format</sp=
an><span class=3D"p">(</span><span class=3D"s2">"Error downloading %s: %s"<=
/span><span class=3D"p">,</span>
</span><span class=3D"line">                        <span class=3D"nx">imag=
eUrl</span><span class=3D"p">,</span>
</span><span class=3D"line">                        <span class=3D"nx">e</s=
pan><span class=3D"p">.</span><span class=3D"nx">message</span><span class=
=3D"p">));</span>
</span><span class=3D"line">                <span class=3D"p">});</span>
</span><span class=3D"line">            <span class=3D"p">}</span>
</span><span class=3D"line">        <span class=3D"p">});</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Final Polish</h3>

<p>One last improvement we can make is to image selection.
In the above example, we hardcoded to the =E2=80=9C0th=E2=80=9D image, but =
we really want to select a pseudo-random image.
The only problem is, we want a specific resolution to always result in the =
same image, so using Math.random() isn=E2=80=99t sufficient.</p>

<p>Using crypto to hash the width/height is a pretty straightforward soluti=
on.
There are probably better ways of getting an evenly distributed selection o=
f images, but this works pretty well.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">crypto</span> <s=
pan class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"=
p">(</span><span class=3D"s1">'crypto'</span><span class=3D"p">);</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">imageCount</span> <span class=3D"o">=3D</span> <span class=3D"mi">10</spa=
n><span class=3D"p">;</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">function</span> <span class=
=3D"nx">selectImage</span><span class=3D"p">(</span><span class=3D"nx">widt=
h</span><span class=3D"p">,</span> <span class=3D"nx">height</span><span cl=
ass=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">md5</span> <span class=3D"o">=3D</span> <span class=3D"nx">crypto</=
span><span class=3D"p">.</span><span class=3D"nx">createHash</span><span cl=
ass=3D"p">(</span><span class=3D"s1">'md5'</span><span class=3D"p">);</span=
>
</span><span class=3D"line">    <span class=3D"nx">md5</span><span class=3D=
"p">.</span><span class=3D"nx">update</span><span class=3D"p">(</span><span=
 class=3D"nx">width</span> <span class=3D"o">+</span> <span class=3D"s1">'-=
'</span> <span class=3D"o">+</span> <span class=3D"nx">height</span><span c=
lass=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"c1">// Digest and take the f=
irst handful of characters</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">hash</span> <span class=3D"o">=3D</span> <span class=3D"nx">md5</sp=
an><span class=3D"p">.</span><span class=3D"nx">digest</span><span class=3D=
"p">(</span><span class=3D"s1">'hex'</span><span class=3D"p">).</span><span=
 class=3D"nx">substring</span><span class=3D"p">(</span><span class=3D"mi">=
0</span><span class=3D"p">,</span> <span class=3D"mi">8</span><span class=
=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"k">return</span> <span class=
=3D"nb">parseInt</span><span class=3D"p">(</span><span class=3D"nx">hash</s=
pan><span class=3D"p">,</span> <span class=3D"mi">16</span><span class=3D"p=
">)</span> <span class=3D"o">%</span> <span class=3D"nx">imageCount</span><=
span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"p">}</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Sample Code</h3>

<p>If you want to try the code in this post, you can check out the <a href=
=3D"https://github.com/itsananderson/azure-blob-storage-node-sample">GitHub=
 project page</a>.</p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-07-09T21:16:08-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jul 9<span>th</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/azure/">Azu=
re</a>, <a class=3D"category" href=3D"https://willi.am/blog/categories/node=
/">Node</a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/07/08/azure-blob-storage-and-node-b=
lob-metadata/">
	=09
			Azure Blob Storage and Node: Blob Metadata</a>
	</h2>
	<div class=3D"entry-content">
		<p><strong>This is part of a series on working with Azure Blob Storage in=
 Node.</strong></p>

<ol>
<li><a href=3D"https://willi.am/blog/2014/06/30/azure-blob-storage-and-node=
/">Introduction</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-and-node=
-first-steps/">First Steps</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/02/azure-blob-storage-and-node=
-creating-blobs/">Creating Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/03/azure-blob-storage-and-node=
-downloading-blobs/">Downloading Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/07/azure-blob-storage-and-node=
-listing-blobs/">Listing Blobs</a></li>
<li><strong>Blob Metadata</strong></li>
<li><a href=3D"https://willi.am/blog/2014/07/09/azure-blob-storage-and-node=
-all-together/">All Together</a></li>
</ol>


<h2>Working With Azure Blob Metadata</h2>

<p>In the <a href=3D"https://willi.am/blog/2014/07/07/azure-blob-storage-an=
d-node-listing-blobs/">previous post</a>, we talked about how to list blobs=
 and containers in your account.
Today we=E2=80=99ll discuss how to work with blob properties and metadata.<=
/p>

<h3>Account Connection Boilerplate</h3>

<p>To work with blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we=E2=80=99ll do that once here, a=
nd assume it in the other code samples.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containerName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'you=
r-container-name'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">createContainerIfNotExists</span><span c=
lass=3D"p">(</span><span class=3D"nx">containerName</span><span class=3D"p"=
>,</span> <span class=3D"kd">function</span><span class=3D"p">(</span><span=
 class=3D"nx">err</span><span class=3D"p">,</span> <span class=3D"nx">resul=
t</span><span class=3D"p">,</span> <span class=3D"nx">response</span><span =
class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s2">"Couldn't create container %s"</span><span class=3D"p">,=
</span> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">result</span><span class=3D"p">)</span> <=
span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'Container %s created'</span><span class=3D"p">,</sp=
an> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'Container %s already exists'</span><span class=3D"p=
">,</span> <span class=3D"nx">containerName</span><span class=3D"p">);</spa=
n>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line">        <span class=3D"c1">// Your code goes he=
re</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Now for the rest of the code samples, we=E2=80=99ll assume that they=E2=
=80=99re replacing the =E2=80=9CYour code goes here=E2=80=9D placeholder in=
 the code above.</p>

<h3>Fetching Blob Properties</h3>

<p>You can fetch the properties for a blob with the <code>getBlobProperties=
</code> method.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">blobName</span> =
<span class=3D"o">=3D</span> <span class=3D"s1">'my-awesome-blob'</span><sp=
an class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">getBlobProperties</span><span class=3D"p=
">(</span><span class=3D"nx">containerName</span><span class=3D"p">,</span>=
 <span class=3D"nx">blobName</span><span class=3D"p">,</span> <span class=
=3D"kd">function</span><span class=3D"p">(</span><span class=3D"nx">err</sp=
an><span class=3D"p">,</span> <span class=3D"nx">result</span><span class=
=3D"p">,</span> <span class=3D"nx">response</span><span class=3D"p">)</span=
> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"s2">"Couldn't fetch properties for blob %s"</span><span cl=
ass=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);</=
span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"k">if</span> <span class=3D"p">(</span><span c=
lass=3D"o">!</span><span class=3D"nx">response</span><span class=3D"p">.</s=
pan><span class=3D"nx">isSuccessful</span><span class=3D"p">)</span> <span =
class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"s2">"Blob %s wasn't found container %s"</span><span class=
=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">,</span=
> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s2">"Successfully fetched properties for blob %s"</span><spa=
n class=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">=
);</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"nx">result</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>The blob properties object includes the blob=E2=80=99s metadata.
If you only need the metadata, you can request just that with the next snip=
pet.</p>

<h3>Fetching Blob Metadata</h3>

<p>You can fetch the properties for a blob with the <code>getBlobProperties=
</code> method.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">blobName</span> =
<span class=3D"o">=3D</span> <span class=3D"s1">'my-awesome-blob'</span><sp=
an class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">getBlobMetadata</span><span class=3D"p">=
(</span><span class=3D"nx">containerName</span><span class=3D"p">,</span> <=
span class=3D"nx">blobName</span><span class=3D"p">,</span> <span class=3D"=
kd">function</span><span class=3D"p">(</span><span class=3D"nx">err</span><=
span class=3D"p">,</span> <span class=3D"nx">result</span><span class=3D"p"=
>,</span> <span class=3D"nx">response</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"s2">"Couldn't fetch metadata for blob %s"</span><span clas=
s=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);</sp=
an>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"k">if</span> <span class=3D"p">(</span><span c=
lass=3D"o">!</span><span class=3D"nx">response</span><span class=3D"p">.</s=
pan><span class=3D"nx">isSuccessful</span><span class=3D"p">)</span> <span =
class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"s2">"Blob %s wasn't found container %s"</span><span class=
=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">,</span=
> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s2">"Successfully fetched metadata for blob %s"</span><span =
class=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);=
</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"nx">result</span><span class=3D"p">.</span><span class=3D"nx=
">metadata</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Updating Blob Properties and Metadata</h3>

<p>A blob=E2=80=99s properties and metadata can be updated with the <code>s=
etBlobProperties</code> and <code>setBlobMetadata</code> methods.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"c1">// Error checking removed for simplicity</span=
>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'my-aweso=
me-blob'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">getBlobProperties</span><span class=3D"p=
">(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">blobName</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">result</span><span class=3D"p">,</span> <span class=3D"nx"=
>response</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"kd">var</span> <span cla=
ss=3D"nx">properties</span> <span class=3D"o">=3D</span> <span class=3D"nx"=
>result</span><span class=3D"p">;</span>
</span><span class=3D"line">        <span class=3D"nx">properties</span><sp=
an class=3D"p">.</span><span class=3D"nx">contentType</span> <span class=3D=
"o">=3D</span> <span class=3D"s1">'image/jpeg'</span><span class=3D"p">;</s=
pan>
</span><span class=3D"line">        <span class=3D"nx">blobService</span><s=
pan class=3D"p">.</span><span class=3D"nx">setBlobProperties</span><span cl=
ass=3D"p">(</span>
</span><span class=3D"line">            <span class=3D"nx">containerName</s=
pan><span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"nx">blobName</span><=
span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"nx">properties</span=
><span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"kd">function</span><=
span class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</=
span> <span class=3D"nx">result</span><span class=3D"p">,</span> <span clas=
s=3D"nx">response</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n>
</span><span class=3D"line">                <span class=3D"nx">console</spa=
n><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">=
(</span><span class=3D"s1">'Successfully updated properties for blob %s'</s=
pan><span class=3D"p">,</span> <span class=3D"nx">blobName</span><span clas=
s=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">});</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>




<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"c1">// Error checking removed for simplicity</span=
>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'my-aweso=
me-blob'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">getBlobMetadata</span><span class=3D"p">=
(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">blobName</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">result</span><span class=3D"p">,</span> <span class=3D"nx"=
>response</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"kd">var</span> <span cla=
ss=3D"nx">metadata</span> <span class=3D"o">=3D</span> <span class=3D"nx">r=
esult</span><span class=3D"p">.</span><span class=3D"nx">metadata</span><sp=
an class=3D"p">;</span>
</span><span class=3D"line">        <span class=3D"nx">metadata</span><span=
 class=3D"p">.</span><span class=3D"nx">hitcount</span> <span class=3D"o">=
=3D</span> <span class=3D"nb">parseInt</span><span class=3D"p">(</span><spa=
n class=3D"nx">metadata</span><span class=3D"p">.</span><span class=3D"nx">=
hitcount</span> <span class=3D"o">||</span> <span class=3D"mi">0</span><spa=
n class=3D"p">)</span> <span class=3D"o">+</span> <span class=3D"mi">1</spa=
n><span class=3D"p">;</span>
</span><span class=3D"line">        <span class=3D"nx">blobService</span><s=
pan class=3D"p">.</span><span class=3D"nx">setBlobMetadata</span><span clas=
s=3D"p">(</span>
</span><span class=3D"line">            <span class=3D"nx">containerName</s=
pan><span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"nx">blobName</span><=
span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"nx">metadata</span><=
span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"kd">function</span><=
span class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</=
span> <span class=3D"nx">result</span><span class=3D"p">,</span> <span clas=
s=3D"nx">response</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n>
</span><span class=3D"line">                <span class=3D"nx">console</spa=
n><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">=
(</span><span class=3D"s1">'Successfully updated metadata for blob %s'</spa=
n><span class=3D"p">,</span> <span class=3D"nx">blobName</span><span class=
=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">});</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Avoiding Race Conditions</h3>

<p>In the previous examples, there=E2=80=99s a potential race condition.
If the blob is updated between the time you fetch the properties/metadata a=
nd the time when you update them, the changes will override each other.</p>

<p>You can avoid this problem by using =E2=80=9Cleases=E2=80=9D.</p>

<p>The idea of a blob lease is that it lets you temporarily =E2=80=9Clock=
=E2=80=9D a blob for modifications.
Once a lease is acquired for a blob, any modifications must include that le=
ase=E2=80=99s Id.</p>

<p>By default, leases don=E2=80=99t have a set duration.
This means they won=E2=80=99t expire automatically, and will need to be man=
ually released.</p>

<p>The other alternative is to set a specific lease duration.
This is a good failsafe.
If your script throws an error and never releases the lease, it will still =
eventually expire.</p>

<p>Valid lease durations are between 15 and 60 seconds.
If you need a longer lease, you can renew the lease before it expires.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
<span class=3D"line-number">21</span>
<span class=3D"line-number">22</span>
<span class=3D"line-number">23</span>
<span class=3D"line-number">24</span>
<span class=3D"line-number">25</span>
<span class=3D"line-number">26</span>
<span class=3D"line-number">27</span>
<span class=3D"line-number">28</span>
<span class=3D"line-number">29</span>
<span class=3D"line-number">30</span>
<span class=3D"line-number">31</span>
<span class=3D"line-number">32</span>
<span class=3D"line-number">33</span>
<span class=3D"line-number">34</span>
<span class=3D"line-number">35</span>
<span class=3D"line-number">36</span>
<span class=3D"line-number">37</span>
<span class=3D"line-number">38</span>
<span class=3D"line-number">39</span>
<span class=3D"line-number">40</span>
<span class=3D"line-number">41</span>
<span class=3D"line-number">42</span>
<span class=3D"line-number">43</span>
<span class=3D"line-number">44</span>
<span class=3D"line-number">45</span>
<span class=3D"line-number">46</span>
<span class=3D"line-number">47</span>
<span class=3D"line-number">48</span>
<span class=3D"line-number">49</span>
<span class=3D"line-number">50</span>
<span class=3D"line-number">51</span>
<span class=3D"line-number">52</span>
<span class=3D"line-number">53</span>
<span class=3D"line-number">54</span>
<span class=3D"line-number">55</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"c1">// Recursively attempts to acquire a lease</sp=
an>
</span><span class=3D"line"><span class=3D"kd">function</span> <span class=
=3D"nx">acquireLease</span><span class=3D"p">(</span><span class=3D"nx">con=
tainerName</span><span class=3D"p">,</span> <span class=3D"nx">blobName</sp=
an><span class=3D"p">,</span> <span class=3D"nx">cb</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"nx">blobService</span><span =
class=3D"p">.</span><span class=3D"nx">acquireLease</span><span class=3D"p"=
>(</span>
</span><span class=3D"line">        <span class=3D"nx">containerName</span>=
<span class=3D"p">,</span>
</span><span class=3D"line">        <span class=3D"nx">blobName</span><span=
 class=3D"p">,</span>
</span><span class=3D"line">        <span class=3D"p">{</span> <span class=
=3D"nx">leaseDuration</span><span class=3D"o">:</span> <span class=3D"mi">1=
5</span> <span class=3D"p">},</span>
</span><span class=3D"line">        <span class=3D"kd">function</span><span=
 class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span=
> <span class=3D"nx">result</span><span class=3D"p">)</span> <span class=3D=
"p">{</span>
</span><span class=3D"line">            <span class=3D"k">if</span> <span c=
lass=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> =
<span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"k">if</span> <sp=
an class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">.</sp=
an><span class=3D"nx">code</span> <span class=3D"o">=3D=3D=3D</span> <span =
class=3D"s1">'LeaseAlreadyPresent'</span><span class=3D"p">)</span> <span c=
lass=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"nx">setTimeo=
ut</span><span class=3D"p">(</span><span class=3D"kd">function</span><span =
class=3D"p">()</span> <span class=3D"p">{</span>
</span><span class=3D"line">                        <span class=3D"nx">acqu=
ireLease</span><span class=3D"p">(</span><span class=3D"nx">containerName</=
span><span class=3D"p">,</span> <span class=3D"nx">blobName</span><span cla=
ss=3D"p">,</span> <span class=3D"nx">cb</span><span class=3D"p">);</span>
</span><span class=3D"line">                    <span class=3D"p">},</span>=
 <span class=3D"mi">100</span><span class=3D"p">);</span>
</span><span class=3D"line">                <span class=3D"p">}</span> <spa=
n class=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"nx">cb</span=
><span class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)=
;</span>
</span><span class=3D"line">                <span class=3D"p">}</span>
</span><span class=3D"line">            <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">cb</span><sp=
an class=3D"p">(</span><span class=3D"kc">null</span><span class=3D"p">,</s=
pan> <span class=3D"nx">result</span><span class=3D"p">.</span><span class=
=3D"nx">id</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">}</span>
</span><span class=3D"line">        <span class=3D"p">});</span>
</span><span class=3D"line"><span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'my-aweso=
me-blob'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">acquireLease</span><span cla=
ss=3D"p">(</span><span class=3D"nx">containerName</span><span class=3D"p">,=
</span> <span class=3D"nx">blobName</span><span class=3D"p">,</span> <span =
class=3D"kd">function</span><span class=3D"p">(</span><span class=3D"nx">er=
r</span><span class=3D"p">,</span> <span class=3D"nx">leaseId</span><span c=
lass=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"s2">"Couldn't acquire lease on blob %s"</span><span class=
=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);</spa=
n>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">blobService</span><s=
pan class=3D"p">.</span><span class=3D"nx">getBlobMetadata</span><span clas=
s=3D"p">(</span>
</span><span class=3D"line">            <span class=3D"nx">containerName</s=
pan><span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"nx">blobName</span><=
span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"p">{</span> <span cl=
ass=3D"nx">leaseId</span><span class=3D"o">:</span> <span class=3D"nx">leas=
eId</span> <span class=3D"p">},</span>
</span><span class=3D"line">            <span class=3D"kd">function</span><=
span class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</=
span> <span class=3D"nx">blob</span><span class=3D"p">,</span> <span class=
=3D"nx">response</span><span class=3D"p">)</span> <span class=3D"p">{</span=
>
</span><span class=3D"line">                <span class=3D"k">if</span> <sp=
an class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">error</span><span class=
=3D"p">(</span><span class=3D"s2">"Couldn't get metadata for blob %s"</span=
><span class=3D"p">,</span> <span class=3D"nx">blobName</span><span class=
=3D"p">);</span>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">error</span><span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">                <span class=3D"p">}</span> <spa=
n class=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"kd">var</spa=
n> <span class=3D"nx">metadata</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"nx">blob</span><span class=3D"p">.</span><span class=3D"nx">metadata=
</span><span class=3D"p">;</span>
</span><span class=3D"line">                    <span class=3D"nx">metadata=
</span><span class=3D"p">.</span><span class=3D"nx">hitcount</span> <span c=
lass=3D"o">=3D</span> <span class=3D"nb">parseInt</span><span class=3D"p">(=
</span><span class=3D"nx">metadata</span><span class=3D"p">.</span><span cl=
ass=3D"nx">hitcount</span> <span class=3D"o">||</span> <span class=3D"mi">0=
</span><span class=3D"p">)</span> <span class=3D"o">+</span> <span class=3D=
"mi">1</span><span class=3D"p">;</span>
</span><span class=3D"line">                    <span class=3D"nx">blobServ=
ice</span><span class=3D"p">.</span><span class=3D"nx">setBlobMetadata</spa=
n><span class=3D"p">(</span>
</span><span class=3D"line">                        <span class=3D"nx">cont=
ainerName</span><span class=3D"p">,</span>
</span><span class=3D"line">                        <span class=3D"nx">blob=
Name</span><span class=3D"p">,</span>
</span><span class=3D"line">                        <span class=3D"nx">meta=
data</span><span class=3D"p">,</span>
</span><span class=3D"line">                        <span class=3D"kd">func=
tion</span><span class=3D"p">(</span><span class=3D"nx">err</span><span cla=
ss=3D"p">,</span> <span class=3D"nx">blob</span><span class=3D"p">,</span> =
<span class=3D"nx">response</span><span class=3D"p">)</span> <span class=3D=
"p">{</span>
</span><span class=3D"line">                            <span class=3D"nx">=
console</span><span class=3D"p">.</span><span class=3D"nx">log</span><span =
class=3D"p">(</span><span class=3D"s2">"Blob %s metadata updated"</span><sp=
an class=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p"=
>);</span>
</span><span class=3D"line">                            <span class=3D"nx">=
blobService</span><span class=3D"p">.</span><span class=3D"nx">releaseLease=
</span><span class=3D"p">(</span>
</span><span class=3D"line">                                <span class=3D"=
nx">containerName</span><span class=3D"p">,</span>
</span><span class=3D"line">                                <span class=3D"=
nx">blobName</span><span class=3D"p">,</span>
</span><span class=3D"line">                                <span class=3D"=
nx">leaseId</span><span class=3D"p">,</span>
</span><span class=3D"line">                                <span class=3D"=
kd">function</span><span class=3D"p">()</span> <span class=3D"p">{});</span=
>
</span><span class=3D"line">                        <span class=3D"p">});</=
span>
</span><span class=3D"line">                <span class=3D"p">}</span>
</span><span class=3D"line">            <span class=3D"p">});</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Conclusion</h3>

<p>In this post we covered interacting with blob properties and metadata.
In the final post in this series, we=E2=80=99ll talk about putting everythi=
ng together to create an blob-backed web service.</p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-07-08T20:47:12-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jul 8<span>th</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/azure/">Azu=
re</a>, <a class=3D"category" href=3D"https://willi.am/blog/categories/node=
/">Node</a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/07/07/azure-blob-storage-and-node-l=
isting-blobs/">
	=09
			Azure Blob Storage and Node: Listing Blobs</a>
	</h2>
	<div class=3D"entry-content">
		<p><strong>This is part of a series on working with Azure Blob Storage in=
 Node.</strong></p>

<ol>
<li><a href=3D"https://willi.am/blog/2014/06/30/azure-blob-storage-and-node=
/">Introduction</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-and-node=
-first-steps/">First Steps</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/02/azure-blob-storage-and-node=
-creating-blobs/">Creating Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/03/azure-blob-storage-and-node=
-downloading-blobs/">Downloading Blobs</a></li>
<li><strong>Listing Blobs</strong></li>
<li><a href=3D"https://willi.am/blog/2014/07/08/azure-blob-storage-and-node=
-blob-metadata/">Blob Metadata</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/09/azure-blob-storage-and-node=
-all-together/">All Together</a></li>
</ol>


<h2>Listing Containers and Blobs in Storage</h2>

<p><a href=3D"https://willi.am/blog/2014/07/03/azure-blob-storage-and-node-=
downloading-blobs/">Last time</a> we talked about downloading blobs from st=
orage.
This time we=E2=80=99ll cover listing your existing containers and blobs.</=
p>

<h3>Listing Containers in an Account</h3>

<p>Listing the containers in a storage account is easy with the <code>listC=
ontainerSegmented</code> method.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">listContainersSegmented</span><span clas=
s=3D"p">(</span><span class=3D"kc">null</span><span class=3D"p">,</span> <s=
pan class=3D"kd">function</span><span class=3D"p">(</span><span class=3D"nx=
">err</span><span class=3D"p">,</span> <span class=3D"nx">result</span><spa=
n class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s2">"Couldn't list containers"</span><span class=3D"p">);</s=
pan>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s1">'Successfully listed containers'</span><span class=3D"p"=
>);</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"nx">result</span><span class=3D"p">.</span><span class=3D"nx=
">entries</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"nx">result</span><span class=3D"p">.</span><span class=3D"nx=
">continuationToken</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>If you have enough containers, not all of them will be returned in one c=
all.
If <code>result.continuationToken</code> is not null, there are more entrie=
s.
You can get the next segment of entries by calling listContainersSegmented =
again with <code>result.continuationToken</code> as the first result.</p>

<p>If you want to aggregate all containers, you can use the following code.=
</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
<span class=3D"line-number">21</span>
<span class=3D"line-number">22</span>
<span class=3D"line-number">23</span>
<span class=3D"line-number">24</span>
<span class=3D"line-number">25</span>
<span class=3D"line-number">26</span>
<span class=3D"line-number">27</span>
<span class=3D"line-number">28</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containers</span> <span class=3D"o">=3D</span> <span class=3D"p">[];</spa=
n>
</span><span class=3D"line"><span class=3D"kd">function</span> <span class=
=3D"nx">aggregateContainers</span><span class=3D"p">(</span><span class=3D"=
nx">err</span><span class=3D"p">,</span> <span class=3D"nx">result</span><s=
pan class=3D"p">,</span> <span class=3D"nx">cb</span><span class=3D"p">)</s=
pan> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">cb</span><span class=
=3D"p">(</span><span class=3D"nx">er</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">containers</span> <s=
pan class=3D"o">=3D</span> <span class=3D"nx">containers</span><span class=
=3D"p">.</span><span class=3D"nx">concat</span><span class=3D"p">(</span><s=
pan class=3D"nx">result</span><span class=3D"p">.</span><span class=3D"nx">=
entries</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">result</span><span class=3D"p">.</span><s=
pan class=3D"nx">continuationToken</span> <span class=3D"o">!=3D=3D</span> =
<span class=3D"kc">null</span><span class=3D"p">)</span> <span class=3D"p">=
{</span>
</span><span class=3D"line">            <span class=3D"nx">blobService</spa=
n>
</span><span class=3D"line">                <span class=3D"p">.</span><span=
 class=3D"nx">listContainersSegmented</span><span class=3D"p">(</span><span=
 class=3D"nx">result</span><span class=3D"p">.</span><span class=3D"nx">con=
tinuationToken</span><span class=3D"p">,</span> <span class=3D"nx">aggregat=
eContainers</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">cb</span><span c=
lass=3D"p">(</span><span class=3D"kc">null</span><span class=3D"p">,</span>=
 <span class=3D"nx">containers</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">listContainersSegmented</span><span clas=
s=3D"p">(</span><span class=3D"kc">null</span><span class=3D"p">,</span> <s=
pan class=3D"kd">function</span><span class=3D"p">(</span><span class=3D"nx=
">err</span><span class=3D"p">,</span> <span class=3D"nx">result</span><spa=
n class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"nx">aggregateContainers</spa=
n><span class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">=
,</span> <span class=3D"nx">result</span><span class=3D"p">,</span> <span c=
lass=3D"kd">function</span><span class=3D"p">(</span><span class=3D"nx">err=
</span><span class=3D"p">,</span> <span class=3D"nx">containers</span><span=
 class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't list containers"</span><span class=3D"p">)=
;</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"nx">containers</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Listing Blobs in a Container</h3>

<p>You can list blobs in a container with the <code>listBlobsSegmented</cod=
e> method.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containerName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'you=
r-container-name'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">listBlobsSegmented</span><span class=3D"=
p">(</span><span class=3D"nx">containerName</span><span class=3D"p">,</span=
> <span class=3D"kc">null</span><span class=3D"p">,</span> <span class=3D"k=
d">function</span><span class=3D"p">(</span><span class=3D"nx">err</span><s=
pan class=3D"p">,</span> <span class=3D"nx">result</span><span class=3D"p">=
)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s2">"Couldn't list blobs for container %s"</span><span class=
=3D"p">,</span> <span class=3D"nx">containerName</span><span class=3D"p">);=
</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s1">'Successfully listed blobs for container %s'</span><span=
 class=3D"p">,</span> <span class=3D"nx">containerName</span><span class=3D=
"p">);</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"nx">result</span><span class=3D"p">.</span><span class=3D"nx=
">entries</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"nx">result</span><span class=3D"p">.</span><span class=3D"nx=
">continuationToken</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>As with containers, you can use the continuationToken to aggregate resul=
ts.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
<span class=3D"line-number">21</span>
<span class=3D"line-number">22</span>
<span class=3D"line-number">23</span>
<span class=3D"line-number">24</span>
<span class=3D"line-number">25</span>
<span class=3D"line-number">26</span>
<span class=3D"line-number">27</span>
<span class=3D"line-number">28</span>
<span class=3D"line-number">29</span>
<span class=3D"line-number">30</span>
<span class=3D"line-number">31</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containerName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'you=
r-container-name'</span><span class=3D"p">;</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobs</span> <span class=3D"o">=3D</span> <span class=3D"p">[];</span>
</span><span class=3D"line"><span class=3D"kd">function</span> <span class=
=3D"nx">aggregateBlobs</span><span class=3D"p">(</span><span class=3D"nx">e=
rr</span><span class=3D"p">,</span> <span class=3D"nx">result</span><span c=
lass=3D"p">,</span> <span class=3D"nx">cb</span><span class=3D"p">)</span> =
<span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">cb</span><span class=
=3D"p">(</span><span class=3D"nx">er</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">blobs</span> <span c=
lass=3D"o">=3D</span> <span class=3D"nx">blobs</span><span class=3D"p">.</s=
pan><span class=3D"nx">concat</span><span class=3D"p">(</span><span class=
=3D"nx">result</span><span class=3D"p">.</span><span class=3D"nx">entries</=
span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">result</span><span class=3D"p">.</span><s=
pan class=3D"nx">continuationToken</span> <span class=3D"o">!=3D=3D</span> =
<span class=3D"kc">null</span><span class=3D"p">)</span> <span class=3D"p">=
{</span>
</span><span class=3D"line">            <span class=3D"nx">blobService</spa=
n><span class=3D"p">.</span><span class=3D"nx">listBlobsSegmented</span><sp=
an class=3D"p">(</span>
</span><span class=3D"line">                <span class=3D"nx">containerNam=
e</span><span class=3D"p">,</span>
</span><span class=3D"line">                <span class=3D"nx">result</span=
><span class=3D"p">.</span><span class=3D"nx">continuationToken</span><span=
 class=3D"p">,</span>
</span><span class=3D"line">                <span class=3D"nx">aggregateBlo=
bs</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">cb</span><span c=
lass=3D"p">(</span><span class=3D"kc">null</span><span class=3D"p">,</span>=
 <span class=3D"nx">blobs</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">listBlobsSegmented</span><span class=3D"=
p">(</span><span class=3D"nx">containerName</span><span class=3D"p">,</span=
> <span class=3D"kc">null</span><span class=3D"p">,</span> <span class=3D"k=
d">function</span><span class=3D"p">(</span><span class=3D"nx">err</span><s=
pan class=3D"p">,</span> <span class=3D"nx">result</span><span class=3D"p">=
)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"nx">aggregateBlobs</span><sp=
an class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</sp=
an> <span class=3D"nx">result</span><span class=3D"p">,</span> <span class=
=3D"kd">function</span><span class=3D"p">(</span><span class=3D"nx">err</sp=
an><span class=3D"p">,</span> <span class=3D"nx">blobs</span><span class=3D=
"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't list blobs"</span><span class=3D"p">);</sp=
an>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"nx">blobs</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Listing Blobs and Containers by Prefix</h3>

<p>If you want to =E2=80=9Cquery=E2=80=9D blobs and containers by a prefix,=
 you can do so with the <code>listContainersSegmentedWithPrefix</code> and =
<code>listBlobsSegmentedWithPrefix</code> methods.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">prefix</span> <span class=3D"o">=3D</span> <span class=3D"s1">'images-'</=
span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">listContainersSegmentedWithPrefix</span>=
<span class=3D"p">(</span>
</span><span class=3D"line">    <span class=3D"nx">prefix</span><span class=
=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kc">null</span><span class=
=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">result</span><span class=3D"p">)</span> <span class=3D"p">=
{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't list containers"</span><span class=3D"p">)=
;</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Found containers with prefix %s"</span><span class=
=3D"p">,</span> <span class=3D"nx">prefix</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"nx">result</span><span class=3D"p">.</span><span class=
=3D"nx">entries</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>




<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containerName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'you=
r-container-name'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">prefix</span> <span class=3D"o">=3D</span> <span class=3D"s1">'image-'</s=
pan><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">listBlobsSegmentedWithPrefix</span><span=
 class=3D"p">(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">prefix</span><span class=
=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kc">null</span><span class=
=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">result</span><span class=3D"p">)</span> <span class=3D"p">=
{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't list blobs"</span><span class=3D"p">);</sp=
an>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Found blobs with prefix %s"</span><span class=3D"p"=
>,</span> <span class=3D"nx">prefix</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"nx">result</span><span class=3D"p">.</span><span class=
=3D"nx">entries</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Conclusion</h3>

<p>In this post we covered listing blobs and containers in your storage acc=
ount.
In the next post, we=E2=80=99ll cover <a href=3D"https://willi.am/blog/2014=
/07/08/azure-blob-storage-and-node-blob-metadata/">blob metadata</a>.</p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-07-07T17:33:03-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jul 7<span>th</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/azure/">Azu=
re</a>, <a class=3D"category" href=3D"https://willi.am/blog/categories/node=
/">Node</a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/07/03/azure-blob-storage-and-node-d=
ownloading-blobs/">
	=09
			Azure Blob Storage and Node: Downloading Blobs</a>
	</h2>
	<div class=3D"entry-content">
		<p><strong>This is part of a series on working with Azure Blob Storage in=
 Node.</strong></p>

<ol>
<li><a href=3D"https://willi.am/blog/2014/06/30/azure-blob-storage-and-node=
/">Introduction</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-and-node=
-first-steps/">First Steps</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/02/azure-blob-storage-and-node=
-creating-blobs/">Creating Blobs</a></li>
<li><strong>Downloading Blobs</strong></li>
<li><a href=3D"https://willi.am/blog/2014/07/07/azure-blob-storage-and-node=
-listing-blobs/">Listing Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/08/azure-blob-storage-and-node=
-blob-metadata/">Blob Metadata</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/09/azure-blob-storage-and-node=
-all-together/">All Together</a></li>
</ol>


<h2>Downloading From Blob Storage</h2>

<p><a href=3D"https://willi.am/blog/2014/07/02/azure-blob-storage-and-node-=
creating-blobs/">Last time</a> we talked about creating Azure blobs.
This time we=E2=80=99ll turn things around and talk about downloading Azure=
 blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>As stated in the previous post, to work with blob storage, you first nee=
d to create a client instance.
To avoid duplicating code over and over, we=E2=80=99ll do that once here, a=
nd assume it in the other code samples.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containerName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'you=
r-container-name'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">createContainerIfNotExists</span><span c=
lass=3D"p">(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">result</span><span class=3D"p">,</span> <span class=3D"nx"=
>response</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't create container %s"</span><span class=3D"=
p">,</span> <span class=3D"nx">containerName</span><span class=3D"p">);</sp=
an>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"k">if</span> <span c=
lass=3D"p">(</span><span class=3D"nx">result</span><span class=3D"p">)</spa=
n> <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">console</spa=
n><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">=
(</span><span class=3D"s1">'Container %s created'</span><span class=3D"p">,=
</span> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">console</spa=
n><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">=
(</span><span class=3D"s1">'Container %s already exists'</span><span class=
=3D"p">,</span> <span class=3D"nx">containerName</span><span class=3D"p">);=
</span>
</span><span class=3D"line">            <span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line">            <span class=3D"c1">// Your code goe=
s here</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Again, for the rest of the code samples, we=E2=80=99ll assume that they=
=E2=80=99re replacing the =E2=80=9CYour code goes here=E2=80=9D placeholder=
 in the code above.</p>

<h3>Checking if a Blob Exists</h3>

<p>In some cases, you don=E2=80=99t need a blob=E2=80=99s contents, you jus=
t need to know if it exists.
You can do this with the <code>getBlobProperties</code> method.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">blobName</span> =
<span class=3D"o">=3D</span> <span class=3D"s1">'my-nonexistent-blob'</span=
>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">getBlobProperties</span><span class=3D"p=
">(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">blobName</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">properties</span><span class=3D"p">,</span> <span class=3D=
"nx">status</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">status</span><span class=3D"p">.</span><s=
pan class=3D"nx">isSuccessful</span><span class=3D"p">)</span> <span class=
=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"c1">// Blob exists</=
span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"c1">// Blob doesn't =
exist</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Downloading a Blob As Text</h3>

<p>To download a blob as a text string, use the <code>getBlobToText</code> =
method.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">blobName</span> =
<span class=3D"o">=3D</span> <span class=3D"s1">'my-awesome-text-blob'</spa=
n><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">getBlobToText</span><span class=3D"p">(<=
/span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">blobName</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">blobContent</span><span class=3D"p">,</span> <span class=
=3D"nx">blob</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"s2">"Couldn't download blob %s"</span><span class=3D"p=
">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Sucessfully downloaded blob %s"</span><span class=
=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);</spa=
n>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"nx">blobContent</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Downloading a Blob to a File</h3>

<p>To download a blob to a file, use the <code>getBlobToFile</code> method.=
</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
<span class=3D"line-number">21</span>
<span class=3D"line-number">22</span>
<span class=3D"line-number">23</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">fs</span> <span =
class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p">(=
</span><span class=3D"s1">'fs'</span><span class=3D"p">);</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">fileName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'hello-wo=
rld.txt'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'my-aweso=
me-file-blob'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">getBlobToFile</span><span class=3D"p">(<=
/span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">blobName</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">fileName</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">blob</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"s2">"Couldn't download blob %s"</span><span class=3D"p=
">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Sucessfully downloaded blob %s to %s"</span><span c=
lass=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">,</=
span> <span class=3D"nx">fileName</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"nx">fs</span><span c=
lass=3D"p">.</span><span class=3D"nx">readFile</span><span class=3D"p">(</s=
pan><span class=3D"nx">fileName</span><span class=3D"p">,</span> <span clas=
s=3D"kd">function</span><span class=3D"p">(</span><span class=3D"nx">err</s=
pan><span class=3D"p">,</span> <span class=3D"nx">fileContents</span><span =
class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"k">if</span> <sp=
an class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">error</span><span class=
=3D"p">(</span><span class=3D"s2">"Couldn't read file %s"</span><span class=
=3D"p">,</span> <span class=3D"nx">fileName</span><span class=3D"p">);</spa=
n>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">error</span><span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">                <span class=3D"p">}</span> <spa=
n class=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D=
"p">(</span><span class=3D"nx">fileContents</span><span class=3D"p">);</spa=
n>
</span><span class=3D"line">                <span class=3D"p">}</span>
</span><span class=3D"line">            <span class=3D"p">});</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Downloading a Blob to a Stream</h3>

<p>To download a blob to a stream, use the <code>getBlobToStream</code> met=
hod.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"c1">// For simplicity, assume getSomeStream return=
s a writable stream</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">myStream</span> <span class=3D"o">=3D</span> <span class=3D"nx">getSomeSt=
ream</span><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'my-aweso=
me-stream-blob'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">getBlobToStream</span><span class=3D"p">=
(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">blobName</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">myStream</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span> <s=
pan class=3D"nx">blob</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"s2">"Couldn't download blob %s"</span><span class=3D"p=
">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Sucessfully downloaded blob %s"</span><span class=
=3D"p">,</span> <span class=3D"nx">blobName</span><span class=3D"p">);</spa=
n>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>You can also integrate with a web server to enable downloads from blob s=
torage.
This is powerfull when combined with the <code>getBlobProperties</code> met=
hod.</p>

<p>In the following example, we use the <code>createReadStream</code> metho=
d so we can easily pipe the stream to the server response object.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">app</span><span class=3D"p">.</span><span clas=
s=3D"nx">get</span><span class=3D"p">(</span><span class=3D"s1">'/download/=
:file'</span><span class=3D"p">,</span> <span class=3D"kd">function</span><=
span class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</=
span> <span class=3D"nx">res</span><span class=3D"p">)</span> <span class=
=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"kd">var</span> <span class=
=3D"nx">fileName</span> <span class=3D"o">=3D</span> <span class=3D"nx">req=
</span><span class=3D"p">.</span><span class=3D"nx">params</span><span clas=
s=3D"p">.</span><span class=3D"nx">file</span><span class=3D"p">;</span>
</span><span class=3D"line">    <span class=3D"nx">blobService</span><span =
class=3D"p">.</span><span class=3D"nx">getBlobProperties</span><span class=
=3D"p">(</span>
</span><span class=3D"line">        <span class=3D"nx">containerName</span>=
<span class=3D"p">,</span>
</span><span class=3D"line">        <span class=3D"nx">fileName</span><span=
 class=3D"p">,</span>
</span><span class=3D"line">        <span class=3D"kd">function</span><span=
 class=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">,</span=
> <span class=3D"nx">properties</span><span class=3D"p">,</span> <span clas=
s=3D"nx">status</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"k">if</span> <span c=
lass=3D"p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> =
<span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">res</span><s=
pan class=3D"p">.</span><span class=3D"nx">send</span><span class=3D"p">(</=
span><span class=3D"mi">502</span><span class=3D"p">,</span> <span class=3D=
"s2">"Error fetching file: %s"</span><span class=3D"p">,</span> <span class=
=3D"nx">err</span><span class=3D"p">.</span><span class=3D"nx">message</spa=
n><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"k">if</span> <span class=3D"p">(</span=
><span class=3D"o">!</span><span class=3D"nx">status</span><span class=3D"p=
">.</span><span class=3D"nx">isSuccessful</span><span class=3D"p">)</span> =
<span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">res</span><s=
pan class=3D"p">.</span><span class=3D"nx">send</span><span class=3D"p">(</=
span><span class=3D"mi">404</span><span class=3D"p">,</span> <span class=3D=
"s2">"The file %s does not exist"</span><span class=3D"p">,</span> <span cl=
ass=3D"nx">fileName</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">res</span><s=
pan class=3D"p">.</span><span class=3D"nx">header</span><span class=3D"p">(=
</span><span class=3D"s1">'Content-Type'</span><span class=3D"p">,</span> <=
span class=3D"nx">properties</span><span class=3D"p">.</span><span class=3D=
"nx">contentType</span><span class=3D"p">);</span>
</span><span class=3D"line">                <span class=3D"nx">blobService<=
/span><span class=3D"p">.</span><span class=3D"nx">createReadStream</span><=
span class=3D"p">(</span><span class=3D"nx">containerName</span><span class=
=3D"p">,</span> <span class=3D"nx">fileName</span><span class=3D"p">).</spa=
n><span class=3D"nx">pipe</span><span class=3D"p">(</span><span class=3D"nx=
">res</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"p">}</span>
</span><span class=3D"line">        <span class=3D"p">});</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Conclusion</h3>

<p>In this post we covered how to check whether a blob exists, and how to d=
ownload the blob.
In the next post, we=E2=80=99ll cover <a href=3D"https://willi.am/blog/2014=
/07/07/azure-blob-storage-and-node-listing-blobs/">how to list containers a=
nd blobs</a>.</p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-07-03T16:23:46-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jul 3<span>rd</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/azure/">Azu=
re</a>, <a class=3D"category" href=3D"https://willi.am/blog/categories/node=
/">Node</a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/07/02/azure-blob-storage-and-node-c=
reating-blobs/">
	=09
			Azure Blob Storage and Node: Creating Blobs</a>
	</h2>
	<div class=3D"entry-content">
		<p><strong>This is part of a series on working with Azure Blob Storage in=
 Node.</strong></p>

<ol>
<li><a href=3D"https://willi.am/blog/2014/06/30/azure-blob-storage-and-node=
/">Introduction</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-and-node=
-first-steps/">First Steps</a></li>
<li><strong>Creating Blobs</strong></li>
<li><a href=3D"https://willi.am/blog/2014/07/03/azure-blob-storage-and-node=
-downloading-blobs/">Downloading Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/07/azure-blob-storage-and-node=
-listing-blobs/">Listing Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/08/azure-blob-storage-and-node=
-blob-metadata/">Blob Metadata</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/09/azure-blob-storage-and-node=
-all-together/">All Together</a></li>
</ol>


<h2>Uploading to Azure Blob Storage</h2>

<p>In the <a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-an=
d-node-first-steps/">previous post</a>, we talked about how to set up and c=
onnect to an Azure Storage account, and how to create a blob container.
Today we=E2=80=99ll discuss how to upload blobs.</p>

<h3>Account Connection Boilerplate</h3>

<p>To upload to blob storage, you first need to create a client instance.
To avoid duplicating code over and over, we=E2=80=99ll do that once here, a=
nd assume it in the other code samples.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containerName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'you=
r-container-name'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">createContainerIfNotExists</span><span c=
lass=3D"p">(</span><span class=3D"nx">containerName</span><span class=3D"p"=
>,</span> <span class=3D"kd">function</span><span class=3D"p">(</span><span=
 class=3D"nx">err</span><span class=3D"p">,</span> <span class=3D"nx">resul=
t</span><span class=3D"p">,</span> <span class=3D"nx">response</span><span =
class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s2">"Couldn't create container %s"</span><span class=3D"p">,=
</span> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">result</span><span class=3D"p">)</span> <=
span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'Container %s created'</span><span class=3D"p">,</sp=
an> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'Container %s already exists'</span><span class=3D"p=
">,</span> <span class=3D"nx">containerName</span><span class=3D"p">);</spa=
n>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">
</span><span class=3D"line">        <span class=3D"c1">// Your code goes he=
re</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Now for the rest of the code samples, we=E2=80=99ll assume that they=E2=
=80=99re replacing the =E2=80=9CYour code goes here=E2=80=9D placeholder in=
 the code above.</p>

<h3>Uploading a String</h3>

<p>Uploading a string is easy with the <code>createBlockBlobFromText</code>=
 method.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">blobService</span><span class=3D"p">.</span><s=
pan class=3D"nx">createBlockBlobFromText</span><span class=3D"p">(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"s1">'my-awesome-text-blob'</=
span><span class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"s1">'Hello, World!'</span><s=
pan class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">,</span> =
<span class=3D"nx">result</span><span class=3D"p">,</span> <span class=3D"n=
x">response</span><span class=3D"p">){</span>
</span><span class=3D"line">        <span class=3D"k">if</span><span class=
=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">){</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't upload string"</span><span class=3D"p">);<=
/span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">error</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'String uploaded successfully'</span><span class=3D"=
p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>The above code creates a blob called =E2=80=9Cmy-awesome-text-blob=E2=80=
=9D inside our container with the content =E2=80=9CHello, World!=E2=80=9D.<=
/p>

<h3>Uploading a File</h3>

<p>Uploading a file is just as simple as uploading a string. Use the <code>=
createBlockBlobFromFile</code> method.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">fileName</span> =
<span class=3D"o">=3D</span> <span class=3D"s1">'hello-world.txt'</span><sp=
an class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">createBlockBlobFromFile</span><span clas=
s=3D"p">(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"s1">'my-awesome-file-blob'</=
span><span class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">fileName</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">,</span> =
<span class=3D"nx">result</span><span class=3D"p">,</span> <span class=3D"n=
x">response</span><span class=3D"p">){</span>
</span><span class=3D"line">        <span class=3D"k">if</span><span class=
=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">){</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't upload file %s"</span><span class=3D"p">,<=
/span> <span class=3D"nx">fileName</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">error</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'File %s uploaded successfully'</span><span class=3D=
"p">,</span> <span class=3D"nx">fileName</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>The above code creates a blob called =E2=80=9Cmy-awesome-file-blob=E2=80=
=9D inside our container with the contents of =E2=80=9Chello-world.txt=E2=
=80=9D.</p>

<h3>Uploading a Stream</h3>

<p>Again, uploading streams is easy with azure-storage.
Just use the <code>createBlockBlobFromStream</code> method.
The one caveat here is that you need to know the length of the stream you=
=E2=80=99re uploading.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"c1">// For simplicity, assume getSomeStream() retu=
rns a readable stream</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">myStream</span> <span class=3D"o">=3D</span> <span class=3D"nx">getSomeSt=
ream</span><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">myStreamLength</span> <span class=3D"o">=3D</span> <span class=3D"nx">get=
SomeStreamLength</span><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">createBlockBlobFromStream</span><span cl=
ass=3D"p">(</span>
</span><span class=3D"line">    <span class=3D"nx">containerName</span><spa=
n class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"s1">'my-awesome-stream-blob'=
</span><span class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">myStream</span><span cla=
ss=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">myStreamLength</span><sp=
an class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"kd">function</span><span cla=
ss=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">,</span> =
<span class=3D"nx">result</span><span class=3D"p">,</span> <span class=3D"n=
x">response</span><span class=3D"p">){</span>
</span><span class=3D"line">        <span class=3D"k">if</span><span class=
=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">){</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s2">"Couldn't upload stream"</span><span class=3D"p">);<=
/span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(<=
/span><span class=3D"nx">error</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'Stream uploaded successfully'</span><span class=3D"=
p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Uploading an HTTP Response</h3>

<p>You can also download a file and upload it to blob storage.
This is useful for things like caching API responses.</p>

<p>For this, we=E2=80=99ll use <code>createWriteStreamToBlockBlob</code> to=
 get a writable stream that saves to a blob.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
<span class=3D"line-number">21</span>
<span class=3D"line-number">22</span>
<span class=3D"line-number">23</span>
<span class=3D"line-number">24</span>
<span class=3D"line-number">25</span>
<span class=3D"line-number">26</span>
<span class=3D"line-number">27</span>
<span class=3D"line-number">28</span>
<span class=3D"line-number">29</span>
<span class=3D"line-number">30</span>
<span class=3D"line-number">31</span>
<span class=3D"line-number">32</span>
<span class=3D"line-number">33</span>
<span class=3D"line-number">34</span>
<span class=3D"line-number">35</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">http</span> <spa=
n class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p"=
>(</span><span class=3D"s1">'http'</span><span class=3D"p">);</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">fileName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'index.ht=
ml'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">domain</span> <span class=3D"o">=3D</span> <span class=3D"s1">'example.co=
m'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">requestOptions</span> <span class=3D"o">=3D</span> <span class=3D"p">{</s=
pan>
</span><span class=3D"line">    <span class=3D"nx">host</span><span class=
=3D"o">:</span> <span class=3D"nx">domain</span><span class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">port</span><span class=
=3D"o">:</span> <span class=3D"mi">80</span><span class=3D"p">,</span>
</span><span class=3D"line">    <span class=3D"nx">path</span><span class=
=3D"o">:</span> <span class=3D"s1">'/'</span> <span class=3D"o">+</span> <s=
pan class=3D"nx">fileName</span>
</span><span class=3D"line"><span class=3D"p">};</span>
</span><span class=3D"line">
</span><span class=3D"line"><span class=3D"nx">http</span><span class=3D"p"=
>.</span><span class=3D"nx">get</span><span class=3D"p">(</span><span class=
=3D"nx">requestOptions</span><span class=3D"p">,</span> <span class=3D"kd">=
function</span> <span class=3D"p">(</span><span class=3D"nx">httpResponse</=
span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"mi">200</span> <span class=3D"o">!=3D=3D</span> <=
span class=3D"nx">httpResponse</span><span class=3D"p">.</span><span class=
=3D"nx">statusCode</span><span class=3D"p">)</span> <span class=3D"p">{</sp=
an>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s1">'Unexpected status code: %d'</span><span class=3D"p">,</=
span> <span class=3D"nx">httpResponse</span><span class=3D"p">.</span><span=
 class=3D"nx">statusCode</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"kd">var</span> <span cla=
ss=3D"nx">writeStream</span> <span class=3D"o">=3D</span> <span class=3D"nx=
">blobService</span><span class=3D"p">.</span><span class=3D"nx">createWrit=
eStreamToBlockBlob</span><span class=3D"p">(</span>
</span><span class=3D"line">            <span class=3D"nx">containerName</s=
pan><span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"nx">fileName</span><=
span class=3D"p">,</span>
</span><span class=3D"line">            <span class=3D"p">{</span>
</span><span class=3D"line">                <span class=3D"nx">contentSetti=
ngs</span><span class=3D"o">:</span> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"nx">contentT=
ype</span><span class=3D"o">:</span> <span class=3D"s1">'text/html'</span>
</span><span class=3D"line">                <span class=3D"p">}</span>
</span><span class=3D"line">            <span class=3D"p">},</span>
</span><span class=3D"line">            <span class=3D"kd">function</span><=
span class=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">,=
</span> <span class=3D"nx">result</span><span class=3D"p">,</span> <span cl=
ass=3D"nx">response</span><span class=3D"p">){</span>
</span><span class=3D"line">                <span class=3D"k">if</span><spa=
n class=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">){</=
span>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D=
"p">(</span><span class=3D"s2">"Couldn't upload file %s from %s"</span><spa=
n class=3D"p">,</span> <span class=3D"nx">fileName</span><span class=3D"p">=
,</span> <span class=3D"nx">domain</span><span class=3D"p">);</span>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">error</span><span class=
=3D"p">(</span><span class=3D"nx">error</span><span class=3D"p">);</span>
</span><span class=3D"line">                <span class=3D"p">}</span> <spa=
n class=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">                    <span class=3D"nx">console<=
/span><span class=3D"p">.</span><span class=3D"nx">log</span><span class=3D=
"p">(</span><span class=3D"s1">'File %s from %s uploaded'</span><span class=
=3D"p">,</span> <span class=3D"nx">fileName</span><span class=3D"p">,</span=
> <span class=3D"nx">domain</span><span class=3D"p">);</span>
</span><span class=3D"line">                <span class=3D"p">}</span>
</span><span class=3D"line">            <span class=3D"p">});</span>
</span><span class=3D"line">        <span class=3D"nx">httpResponse</span><=
span class=3D"p">.</span><span class=3D"nx">pipe</span><span class=3D"p">(<=
/span><span class=3D"nx">writeStream</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">}).</span><span class=3D"nx">=
on</span><span class=3D"p">(</span><span class=3D"s1">'error'</span><span c=
lass=3D"p">,</span> <span class=3D"kd">function</span><span class=3D"p">(</=
span><span class=3D"nx">e</span><span class=3D"p">)</span> <span class=3D"p=
">{</span>
</span><span class=3D"line">    <span class=3D"nx">console</span><span clas=
s=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span><spa=
n class=3D"s2">"Got error: "</span> <span class=3D"o">+</span> <span class=
=3D"nx">e</span><span class=3D"p">.</span><span class=3D"nx">message</span>=
<span class=3D"p">);</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>This example is a bit more complex, but the main idea is to create a wri=
te stream for the blob we want to create.
Then we fetch <a href=3D"http://example.com/index.html">http://example.com/=
index.html</a> and <code>.pipe</code> the response to the blob=E2=80=99s wr=
ite stream;</p>

<p>If you=E2=80=99re doing this in a web server, you=E2=80=99ll probably al=
so want to pipe the http.get response to the client.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
<span class=3D"line-number">16</span>
<span class=3D"line-number">17</span>
<span class=3D"line-number">18</span>
<span class=3D"line-number">19</span>
<span class=3D"line-number">20</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"nx">app</span><span class=3D"p">.</span><span clas=
s=3D"nx">get</span><span class=3D"p">(</span><span class=3D"s1">'/somepath'=
</span><span class=3D"p">,</span> <span class=3D"kd">function</span><span c=
lass=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> =
<span class=3D"nx">res</span><span class=3D"p">)</span> <span class=3D"p">{=
</span>
</span><span class=3D"line">
</span><span class=3D"line">
</span><span class=3D"line">    <span class=3D"nx">http</span><span class=
=3D"p">.</span><span class=3D"nx">get</span><span class=3D"p">(</span><span=
 class=3D"nx">requestOptions</span><span class=3D"p">,</span> <span class=
=3D"kd">function</span> <span class=3D"p">(</span><span class=3D"nx">httpRe=
sponse</span><span class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"mi">200</span> <span class=3D"o">!=3D=3D</spa=
n> <span class=3D"nx">httpResponse</span><span class=3D"p">.</span><span cl=
ass=3D"nx">statusCode</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span>
</span><span class=3D"line">            <span class=3D"nx">res</span><span =
class=3D"p">.</span><span class=3D"nx">send</span><span class=3D"p">(</span=
><span class=3D"mi">502</span><span class=3D"p">,</span> <span class=3D"s1"=
>'Unexpected status code: '</span> <span class=3D"o">+</span> <span class=
=3D"nx">httpResponse</span><span class=3D"p">.</span><span class=3D"nx">sta=
tusCode</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">
</span><span class=3D"line">            <span class=3D"c1">// ...</span>
</span><span class=3D"line">            <span class=3D"c1">// Blob stream s=
etup code from above</span>
</span><span class=3D"line">            <span class=3D"c1">// ...</span>
</span><span class=3D"line">
</span><span class=3D"line">            <span class=3D"c1">// Pipe server r=
esponse to both the blob and the client who made this request</span>
</span><span class=3D"line">            <span class=3D"nx">httpResponse</sp=
an><span class=3D"p">.</span><span class=3D"nx">pipe</span><span class=3D"p=
">(</span><span class=3D"nx">writeStream</span><span class=3D"p">);</span>
</span><span class=3D"line">            <span class=3D"nx">httpResponse</sp=
an><span class=3D"p">.</span><span class=3D"nx">pipe</span><span class=3D"p=
">(</span><span class=3D"nx">res</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">}).</span><span class=3D"=
nx">on</span><span class=3D"p">(</span><span class=3D"s1">'error'</span><sp=
an class=3D"p">,</span> <span class=3D"kd">function</span><span class=3D"p"=
>(</span><span class=3D"nx">e</span><span class=3D"p">)</span> <span class=
=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">send</span><span class=3D"p">(</span><sp=
an class=3D"mi">502</span><span class=3D"p">,</span> <span class=3D"s2">"Go=
t error: "</span> <span class=3D"o">+</span> <span class=3D"nx">e</span><sp=
an class=3D"p">.</span><span class=3D"nx">message</span><span class=3D"p">)=
;</span>
</span><span class=3D"line">    <span class=3D"p">});</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Setting a Content Type</h3>

<p>You may have noticed that the previoius example passed an extra option t=
o <code>createWriteStreamToBlockBlob</code>.
There are a number of properties you can set on a blob, but the most useful=
 is the contentType property.
This determines the Content-Type header that will be set if the blob is acc=
essed or streamed directly from blob storage.</p>

<p>By default the content type is set to =E2=80=98application/octet-stream=
=E2=80=99.
If you create a blob with this type and try to access it with your browser,=
 it will simply be downloaded rather than displayed as the desired type (te=
xt, html, image).</p>

<p>To set a custom content type, pass something like <code>{ contentSetting=
s: { contentType: 'image/jpeg' } }</code> before your callback function.
Note that <code>createBlockBlobFromFile</code> will infer the content type =
from the file extension.</p>

<p>There are a number of other properties that can be set on a blob, includ=
ing contentEncoding, contentLanguage, and metadata (which will be covered i=
n a later post).</p>

<p>The easiest way to see the different options is to look in <a href=3D"ht=
tps://github.com/Azure/azure-storage-node/blob/master/lib/services/blob/blo=
bservice.js">lib\services\blob\blobservice.js</a> inside the azure-storage =
package.</p>

<h3>Conclusion</h3>

<p>In this post we=E2=80=99ve covered the many ways to create Azure blobs i=
n Node.
Next time we=E2=80=99ll talk about <a href=3D"https://willi.am/blog/2014/07=
/03/azure-blob-storage-and-node-downloading-blobs/">downloading blobs</a>.<=
/p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-07-02T13:27:10-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jul 2<span>nd</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/azure/">Azu=
re</a>, <a class=3D"category" href=3D"https://willi.am/blog/categories/node=
/">Node</a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-and-node-f=
irst-steps/">
	=09
			Azure Blob Storage and Node: First Steps</a>
	</h2>
	<div class=3D"entry-content">
		<p><strong>This is part of a series on working with Azure Blob Storage in=
 Node.</strong></p>

<ol>
<li><a href=3D"https://willi.am/blog/2014/06/30/azure-blob-storage-and-node=
/">Introduction</a></li>
<li><strong>First Steps</strong></li>
<li><a href=3D"https://willi.am/blog/2014/07/02/azure-blob-storage-and-node=
-creating-blobs/">Creating Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/03/azure-blob-storage-and-node=
-downloading-blobs/">Downloading Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/07/azure-blob-storage-and-node=
-listing-blobs/">Listing Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/08/azure-blob-storage-and-node=
-blob-metadata/">Blob Metadata</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/09/azure-blob-storage-and-node=
-all-together/">All Together</a></li>
</ol>


<h2>Getting Started With Azure Blob Storage and Node</h2>

<p>The Azure team has made it really simple to start using Blob Storage in =
Node.
The first thing you=E2=80=99ll want to do is install the <a href=3D"https:/=
/www.npmjs.org/package/azure-storage">azure-storage</a> module into your pr=
oject.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
</pre></td><td class=3D"code"><pre><code class=3D"bash"><span class=3D"line=
"><span class=3D"c"># Make sure you have a package.json so npm can save you=
r azure-storage dependency </span>
</span><span class=3D"line">npm install --save azure-storage
</span></code></pre></td></tr></tbody></table></div></figure>


<h3>Create Storage Account</h3>

<p>Unless you already have one, you=E2=80=99ll need to create an Azure stor=
age account.
They=E2=80=99re pretty simple to create.
From the <a href=3D"https://manage.windowsazure.com/">Azure portal</a>, cli=
ck =E2=80=9CNew=E2=80=9D in the bottom-left.
Select =E2=80=9CData Services=E2=80=9D, then =E2=80=9CStorage=E2=80=9D, the=
n =E2=80=9CQuick Create=E2=80=9D.</p>

<p>Enter a unique name for your account.
Under =E2=80=9CLocation/Affinity Group=E2=80=9D, choose a location.
Ideally, you should choose the same location as your web site or web servic=
e.
If in doubt, choose the location nearest to you.</p>

<p>During dev time, you probably won=E2=80=99t want to work against product=
ion data.
To avoid this, you can create a second storage account using the steps abov=
e.</p>

<h3>Configure Access Keys</h3>

<p>In order for your Node app to connect to your storage account, you=E2=80=
=99ll need to configure it with its access information.
These instructions assume you=E2=80=99ve already <a href=3D"http://azure.mi=
crosoft.com/en-us/documentation/articles/cloud-services-nodejs-develop-depl=
oy-express-app/">created an Azure Website</a>.</p>

<p>There are two ways to configure the azure-storage module=E2=80=99s acces=
s info.
One way is by constructing an Azure client object with a hardcoded account =
name and an access key.
The problem with this approach is that it requires checking your access key=
 in with your code, which you shouldn=E2=80=99t do.</p>

<p>The other appraoch is to use environment variables to store your account=
 info.
The azure-storage module will pick up specific environment variables and us=
e those to connect to your storage account.
Those environment variables are <code>AZURE_STORAGE_ACCOUNT</code> and <cod=
e>AZURE_STORAGE_ACCESS_KEY</code>, or <code>AZURE_STORAGE_CONNECTION_STRING=
</code>.
In our example, we=E2=80=99ll use the first two.</p>

<p>First, in the Azure portal, navigate to your storage account.
At the bottom of the screen, click =E2=80=9CManage Access Keys=E2=80=9D.</p=
>

<p><img src=3D"https://itsananderson.blob.core.windows.net/post-images/azur=
e-account-access-keys.png"></p>

<p>Copy the primary access key, then navigate to your website=E2=80=99s =E2=
=80=9CConfigure=E2=80=9D tab.
Under =E2=80=9Capp settings=E2=80=9D, add two new settings:
<code>AZURE_STORAGE_ACCOUNT</code> with your storage account name, and <cod=
e>AZURE_STORAGE_ACCESS_KEY</code> with the access key you just copied.</p>

<p><img src=3D"https://itsananderson.blob.core.windows.net/post-images/webs=
ite-access-key-configuration.png"></p>

<p>For local dev, you=E2=80=99ll also need to set up credentials for your d=
ev storage account (or production if you didn=E2=80=99t create a dev accoun=
t).
On Linux and Mac, you can set environment variables in your <code>.bash_pro=
file</code>.
Instructions for that are outside the scope of this post.</p>

<p>On Linux and Mac you can also set environment variables specifically for=
 an app run.
This also works on Windows if you=E2=80=99re using something like Git Bash.=
</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
</pre></td><td class=3D"code"><pre><code class=3D"bash"><span class=3D"line=
"><span class=3D"nv">AZURE_STORAGE_ACCOUNT</span><span class=3D"o">=3D</spa=
n>mystorage <span class=3D"nv">AZURE_STORAGE_ACCESS_KEY</span><span class=
=3D"o">=3D</span>123-my-access-key node app.js
</span></code></pre></td></tr></tbody></table></div></figure>


<p>On windows, the easiest option is to configure environment variables in =
your machine settings.
These instructions are for Windows 8.
You=E2=80=99ll have to look for instructions for older versions of Windows,=
 but the idea is pretty much the same.</p>

<ol>
<li>Open the start screen.</li>
<li>Type =E2=80=9Cenvironment=E2=80=9D.</li>
<li>Click =E2=80=9CEdit environment variables for your account=E2=80=9D sho=
uld come up.</li>
<li>Click the =E2=80=9CNew=E2=80=A6=E2=80=9D button.</li>
<li>Enter =E2=80=9CAZURE_STORAGE_ACCOUNT=E2=80=9D for the =E2=80=9CVariable=
 name=E2=80=9D and your storage account name for the =E2=80=9CVariable valu=
e=E2=80=9D</li>
</ol>


<p><img src=3D"https://itsananderson.blob.core.windows.net/post-images/stor=
age-account-environment-variable.png"></p>

<p>Repeat steps 1 through 5 again for the =E2=80=9CAZURE_STORAGE_ACCESS_KEY=
=E2=80=9D variable, then click =E2=80=9COK=E2=80=9D to close the =E2=80=9CE=
nvironment Variables=E2=80=9D screen.
If your console is open, restart it.</p>

<h3>Write Some Code</h3>

<p>Now that we=E2=80=99ve gotten the configuration taken care of, we can wr=
ite some code.</p>

<p>We=E2=80=99ll dive into the code more in the next post, but for now, her=
e=E2=80=99s something to get you started.</p>

<figure class=3D"code"><figcaption><span></span></figcaption><div class=3D"=
highlight"><table><tbody><tr><td class=3D"gutter"><pre class=3D"line-number=
s"><span class=3D"line-number">1</span>
<span class=3D"line-number">2</span>
<span class=3D"line-number">3</span>
<span class=3D"line-number">4</span>
<span class=3D"line-number">5</span>
<span class=3D"line-number">6</span>
<span class=3D"line-number">7</span>
<span class=3D"line-number">8</span>
<span class=3D"line-number">9</span>
<span class=3D"line-number">10</span>
<span class=3D"line-number">11</span>
<span class=3D"line-number">12</span>
<span class=3D"line-number">13</span>
<span class=3D"line-number">14</span>
<span class=3D"line-number">15</span>
</pre></td><td class=3D"code"><pre><code class=3D"javascript"><span class=
=3D"line"><span class=3D"kd">var</span> <span class=3D"nx">storage</span> <=
span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D=
"p">(</span><span class=3D"s1">'azure-storage'</span><span class=3D"p">);</=
span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">blobService</span> <span class=3D"o">=3D</span> <span class=3D"nx">storag=
e</span><span class=3D"p">.</span><span class=3D"nx">createBlobService</spa=
n><span class=3D"p">();</span>
</span><span class=3D"line"><span class=3D"kd">var</span> <span class=3D"nx=
">containerName</span> <span class=3D"o">=3D</span> <span class=3D"s1">'you=
r-container-name'</span><span class=3D"p">;</span>
</span><span class=3D"line"><span class=3D"nx">blobService</span><span clas=
s=3D"p">.</span><span class=3D"nx">createContainerIfNotExists</span><span c=
lass=3D"p">(</span><span class=3D"nx">containerName</span><span class=3D"p"=
>,</span> <span class=3D"kd">function</span><span class=3D"p">(</span><span=
 class=3D"nx">err</span><span class=3D"p">,</span> <span class=3D"nx">resul=
t</span><span class=3D"p">,</span> <span class=3D"nx">response</span><span =
class=3D"p">)</span> <span class=3D"p">{</span>
</span><span class=3D"line">    <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"nx">err</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</span>=
<span class=3D"s2">"Couldn't create container %s"</span><span class=3D"p">,=
</span> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"nx">console</span><span =
class=3D"p">.</span><span class=3D"nx">error</span><span class=3D"p">(</spa=
n><span class=3D"nx">err</span><span class=3D"p">);</span>
</span><span class=3D"line">    <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"nx">result</span><span class=3D"p">)</span> <=
span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'Container %s created'</span><span class=3D"p">,</sp=
an> <span class=3D"nx">containerName</span><span class=3D"p">);</span>
</span><span class=3D"line">        <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span>
</span><span class=3D"line">            <span class=3D"nx">console</span><s=
pan class=3D"p">.</span><span class=3D"nx">log</span><span class=3D"p">(</s=
pan><span class=3D"s1">'Container %s already exists'</span><span class=3D"p=
">,</span> <span class=3D"nx">containerName</span><span class=3D"p">);</spa=
n>
</span><span class=3D"line">        <span class=3D"p">}</span>
</span><span class=3D"line">    <span class=3D"p">}</span>
</span><span class=3D"line"><span class=3D"p">});</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>If you run the above code after configuring your account credentials, it=
 should output =E2=80=9CContainer your-container-name created=E2=80=9D.
If you run it again, it should output =E2=80=9CContainer your-container-nam=
e already exists=E2=80=9D.</p>

<p>Azure only creates the container if it doesn=E2=80=99t exist.
If it already exists, the library will tell you, but it won=E2=80=99t give =
you an error.</p>

<h3>Conclusion</h3>

<p>We=E2=80=99ve looked at how to get set up with Azure blob storage.
In the next post, we=E2=80=99ll talk about <a href=3D"https://willi.am/blog=
/2014/07/02/azure-blob-storage-and-node-creating-blobs/">creating blobs</a>=
.</p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-07-01T06:00:03-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jul 1<span>st</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/azure/">Azu=
re</a>, <a class=3D"category" href=3D"https://willi.am/blog/categories/node=
/">Node</a>


</div>
=09
</div>
</article>


    <article class=3D"post">
	<h2 class=3D"title">
	=09
		<a href=3D"https://willi.am/blog/2014/06/30/azure-blob-storage-and-node/"=
>
	=09
			Azure Blob Storage and Node</a>
	</h2>
	<div class=3D"entry-content">
		<p><strong>This is the introduction to a series on working with Azure Blo=
b Storage in Node.</strong></p>

<ol>
<li><strong>Introduction</strong></li>
<li><a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-and-node=
-first-steps/">First Steps</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/02/azure-blob-storage-and-node=
-creating-blobs/">Creating Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/03/azure-blob-storage-and-node=
-downloading-blobs/">Downloading Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/07/azure-blob-storage-and-node=
-listing-blobs/">Listing Blobs</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/08/azure-blob-storage-and-node=
-blob-metadata/">Blob Metadata</a></li>
<li><a href=3D"https://willi.am/blog/2014/07/09/azure-blob-storage-and-node=
-all-together/">All Together</a></li>
</ol>


<p>Over the weekend I put together a service called <a href=3D"http://place=
bacon.net/">placebacon</a> that serves placeholder bacon images.
It=E2=80=99s certainly not the first placeholder image service, but it=E2=
=80=99s the first one that makes your designs look delicious :)</p>

<p><img src=3D"http://placebacon.net/800/100?image=3D9"></p>

<p>I decided to build the service on Azure so that it can easily be scaled =
if anyone actually starts using it.
Caching generated images with Azure Blob Storage made the most sense.</p>

<p>The Azure team has released an npm package called <a href=3D"https://www=
.npmjs.org/package/azure-storage">azure-storage</a>, which I used to intera=
ct with the Azure Blobs.
The documentation for the azure-storage package is fairly good, but I still=
 mostly found myself digging into the source code to figure things out.
I=E2=80=99m writing this blog series to make it easier for other Node devel=
opers to work with the Node bindings for Azure Blob Storage.</p>

<h2>Placebacon=E2=80=99s Service Architecture</h2>

<p>To set a framework for the upcoming discussions about Blob Storage, I=E2=
=80=99m providing a high-level overview of placebacon=E2=80=99s architectur=
e.</p>

<p>First, I need a way to resize images in Node.
After spending several frustrating hours trying to find an image manipulati=
on module that works in Windows, I decided that a Linux VM would be the eas=
iest way to resize images in Node.
Since I=E2=80=99m using the Azure infrastructure, setting up a Linux VM is =
straightforward, but I also want to take advantage of the simple scaling ab=
ility of Azure Websites.</p>

<p>To accomplish this, I decided to have a lightweight Ubuntu VM for resizi=
ng images.
Then I put together an Azure website (in Node, of course) that requests res=
ized images from the service running on Ubuntu, and caches the results in B=
lob Storage.</p>

<p>This (literal) back-of-an-envolope drawing illustrates the layout.</p>

<p><img src=3D"https://itsananderson.blob.core.windows.net/post-images/plac=
ebacon-architecture.jpg"></p>

<p>With the architecture design out of the way, next time I=E2=80=99ll cove=
r the <a href=3D"https://willi.am/blog/2014/07/01/azure-blob-storage-and-no=
de-first-steps/">steps for getting started with Azure Blob Storage</a>.</p>

	=09
	=09
	</div>


<div class=3D"meta">
	<div class=3D"date">








 =20


<time datetime=3D"2014-06-30T14:09:17-07:00" pubdate=3D"" data-updated=3D"t=
rue">Jun 30<span>th</span>, 2014</time></div>
	<div class=3D"tags">


	<a class=3D"category" href=3D"https://willi.am/blog/categories/azure/">Azu=
re</a>, <a class=3D"category" href=3D"https://willi.am/blog/categories/node=
/">Node</a>


</div>
=09
</div>
</article>

<nav id=3D"pagenavi">
   =20
        <a href=3D"https://willi.am/blog/page/3/" class=3D"prev">Prev</a>
   =20
   =20
        <a href=3D"https://willi.am/blog/page/5/" class=3D"next">Next</a>
   =20
    <div class=3D"center"><a href=3D"https://willi.am/blog/archives">Blog A=
rchives</a></div>
</nav></div>
	<footer id=3D"footer" class=3D"inner">Copyright =C2=A9 2020

    Will Anderson

</footer>
=09








</body></html>
------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://willi.am/stylesheets/screen.css

@charset "utf-8";

@font-face { font-family: FontAwesome; src: url("/font/fontawesome-webfont.=
woff") format("woff"), url("/font/fontawesome-webfont.ttf") format("truetyp=
e"); font-weight: normal; font-style: normal; }

* { margin: 0px; padding: 0px; }

body { font-family: HelveticaNeue-Light, "Helvetica Neue Light", "Helvetica=
 Neue", Helvetica, Arial, sans-serif; font-weight: 300; font-size: 14px; ba=
ckground: rgb(255, 255, 255); color: rgb(102, 102, 102); }

@media screen and (max-width: 1040px) {
  body { margin: 0px 20px; }
}

@media screen and (max-width: 600px) {
  body { font-size: 13px; }
}

h1 { font-size: 1.8em; }

h2 { font-size: 1.5em; }

h3 { font-size: 1.3em; }

a { text-decoration: none; outline-width: 0px; color: rgb(37, 143, 184); }

.alignleft { float: left; }

.alignright { float: right; }

.clearfix { }

.clearfix::after { content: ""; display: table; clear: both; }

.inner { width: 1000px; margin: 0px auto; }

@media screen and (max-width: 1040px) {
  .inner { width: 100%; }
}

.pullquote-right::before, .pullquote-left::before { padding: 0px; border: n=
one; content: attr(data-pullquote); float: right; width: 45%; margin: 0.5em=
 0px 1em 1.5em; position: relative; top: 7px; font-size: 1.4em; line-height=
: 1.45em; }

.pullquote-left::before { float: left; margin: 0.5em 1.5em 1em 0px; }

#header { height: 30px; padding: 30px 0px; border-bottom: 1px solid rgb(221=
, 221, 221); line-height: 30px; }

@media screen and (max-width: 1040px) {
  #header { height: auto; position: relative; padding-bottom: 10px; }
}

#header a { color: rgb(102, 102, 102); transition: color 0.3s ease 0s; }

#header a:hover { color: rgb(37, 143, 184); }

#header h1 { float: left; font-weight: 300; font-size: 30px; }

@media screen and (max-width: 1040px) {
  #header h1 { float: none; }
}

#main-nav { float: left; }

@media screen and (max-width: 1040px) {
  #main-nav { float: none; margin-left: 0px; margin-top: 15px; }
}

@media screen and (max-width: 600px) {
  #main-nav > ul { display: none; }
}

#main-nav > ul > li { margin-left: 30px; display: inline-block; vertical-al=
ign: middle; zoom: 1; }

@media screen and (max-width: 1040px) {
  #main-nav > ul > li { margin-left: 0px; margin-right: 50px; }
  #main-nav > ul > li:last-of-type { margin-right: 0px; }
}

#main-nav > ul > li:hover > a { color: rgb(37, 143, 184); }

#main-nav > ul > li > a { padding: 38px 0px; margin-top: -38px; }

#main-nav > ul > li > a::after { content: "=EF=81=B8"; color: rgb(204, 204,=
 204); font: 12px FontAwesome; padding-left: 10px; }

#main-nav > ul > li > a:only-child::after { content: ""; }

@media screen and (max-width: 1040px) {
  #main-nav > ul > li > a { padding: 18px 0px; }
}

#main-nav > ul ul { position: absolute; top: 60px; left: -15px; z-index: 10=
; white-space: nowrap; background: rgb(221, 221, 221); border: 1px solid rg=
b(204, 204, 204); list-style: none; display: none; box-shadow: rgba(0, 0, 0=
, 0.1) 0px 4px 8px; border-radius: 0px 0px 5px 5px; }

@media screen and (max-width: 1040px) {
  #main-nav > ul ul { top: 40px; }
}

#main-nav > ul ul ul { border-radius: 0px 5px 5px; }

#main-nav > ul ul li { border-top: 1px solid rgb(255, 255, 255); border-bot=
tom: 1px solid rgb(204, 204, 204); }

#main-nav > ul ul li:hover { background: rgb(213, 213, 213); }

#main-nav > ul ul li:first-of-type { border-top: none; }

#main-nav > ul ul li:first-of-type ul { border-radius: 0px 0px 5px 5px; }

#main-nav > ul ul li:last-of-type { border-bottom: none; }

#main-nav > ul ul li > a { display: block; padding: 5px 15px; }

#main-nav > ul ul li > a::after { content: "=EF=81=94"; color: rgb(153, 153=
, 153); font: 12px FontAwesome; padding-left: 10px; }

#main-nav > ul ul li > a:hover { color: rgb(102, 102, 102); }

#main-nav > ul ul li > a:only-child::after { content: ""; }

#main-nav > ul ul ul { top: 0px; left: 100%; }

#main-nav > ul li { position: relative; }

#main-nav > ul li:hover > ul { display: block; }

#main-nav select { display: none; margin-bottom: 10px; }

@media screen and (max-width: 600px) {
  #main-nav select { display: block; }
}

#mobile-nav { display: none; height: 37px; position: relative; }

@media screen and (max-width: 600px) {
  #mobile-nav { display: block; }
}

#mobile-nav a { display: block; }

#mobile-nav .button { cursor: pointer; }

#mobile-nav .container { display: none; }

#mobile-nav .menu { position: relative; width: 100%; }

#mobile-nav .menu .button { background: rgb(242, 242, 242); border: 1px sol=
id rgb(221, 221, 221); color: rgb(153, 153, 153); padding: 0px 60px 0px 10p=
x; position: relative; border-radius: 5px; }

#mobile-nav .menu .button:hover { color: rgb(153, 153, 153); }

#mobile-nav .menu .button.on { color: rgb(102, 102, 102); border-radius: 5p=
x 5px 5px 0px; }

#mobile-nav .menu .button.on::before { content: "=EF=81=B7"; }

#mobile-nav .menu .button::before { content: "=EF=81=B8"; color: rgb(221, 2=
21, 221); font: 16px / 30px FontAwesome; position: absolute; top: 0px; righ=
t: 40px; }

#mobile-nav .menu .container { background: rgb(242, 242, 242); border-right=
: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221)=
; border-left: 1px solid rgb(221, 221, 221); border-image: initial; border-=
top: none; position: absolute; top: 31px; z-index: 1; border-radius: 0px 0p=
x 5px 5px; }

#mobile-nav .menu .container ul { list-style: none; }

#mobile-nav .menu .container ul ul { margin-left: 20px; }

#mobile-nav .menu .container a { padding: 0px 10px; }

#mobile-nav .search { position: absolute; top: 0px; right: 0px; }

#mobile-nav .search .button { background: rgb(221, 221, 221); width: 30px; =
height: 30px; position: absolute; top: 1px; right: -1px; border-radius: 0px=
 5px 5px 0px; }

#mobile-nav .search .button::before { content: "=EF=80=82"; color: rgb(242,=
 242, 242); font: 20px / 30px FontAwesome; position: absolute; top: 0px; le=
ft: 7px; }

#mobile-nav .search .button.on { background: rgb(204, 204, 204); }

#mobile-nav .search .button.on::before { content: "=EF=80=8D"; }

#mobile-nav .search .container { position: absolute; right: 51px; z-index: =
1; }

#mobile-nav .search input[type=3D"text"] { background: rgb(255, 255, 255); =
border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221,=
 221, 221); border-left: 1px solid rgb(221, 221, 221); border-image: initia=
l; border-right: none; color: rgb(153, 153, 153); font: 13px HelveticaNeue-=
Light, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, sans-ser=
if; height: 30px; width: 100%; padding: 0px 10px; border-radius: 5px 0px 0p=
x 5px; }

@media screen and (max-width: 1040px) {
  #sub-nav { position: absolute; top: 30px; right: 0px; }
}

@media screen and (max-width: 600px) {
  #sub-nav { display: none; }
}

#sub-nav .search { float: left; margin-top: 1px; position: relative; }

@media screen and (max-width: 1040px) {
  #sub-nav .search { float: none; margin-top: 15px; }
}

#sub-nav .search::before { content: "=EF=80=82"; color: rgb(204, 204, 204);=
 font: 18px / 30px FontAwesome; position: absolute; top: 0px; right: 125px;=
 }

#sub-nav .search input[type=3D"text"] { background: rgb(242, 242, 242); col=
or: rgb(153, 153, 153); border: 1px solid rgb(221, 221, 221); font: 13px He=
lveticaNeue-Light, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Ari=
al, sans-serif; padding: 6px 15px 6px 35px; width: 100px; transition: all 0=
.3s ease 0s; border-radius: 15px; }

#sub-nav .search input[type=3D"text"]:focus, #sub-nav .search input[type=3D=
"text"]:active { background: rgb(255, 255, 255); border-top: 1px solid rgb(=
204, 204, 204); color: rgb(102, 102, 102); outline: none; }

#sub-nav .social { float: left; margin-right: 15px; }

@media screen and (max-width: 1040px) {
  #sub-nav .social { float: none; margin-right: 0px; }
  #sub-nav .social a:last-of-type { margin-right: 0px; }
}

#sub-nav .social a { border-radius: 50%; display: inline-block; vertical-al=
ign: middle; zoom: 1; text-indent: -9999px; margin-right: 15px; opacity: 0.=
5; width: 28px; height: 28px; transition: all 0.3s ease 0s; }

#sub-nav .social a:hover { opacity: 1; }

#sub-nav .social a.facebook { background: url("/images/social/facebook.png?=
1475599307") center center no-repeat rgb(59, 89, 152); border: 1px solid rg=
b(59, 89, 152); }

#sub-nav .social a.facebook:hover { border: 1px solid rgb(45, 67, 115); }

#sub-nav .social a.google { background: url("/images/social/google.png?1475=
599307") center center no-repeat rgb(200, 61, 32); border: 1px solid rgb(20=
0, 61, 32); }

#sub-nav .social a.google:hover { border: 1px solid rgb(156, 48, 25); }

#sub-nav .social a.twitter { background: url("/images/social/twitter.png?14=
75599307") center center no-repeat rgb(85, 207, 248); border: 1px solid rgb=
(85, 207, 248); }

#sub-nav .social a.twitter:hover { border: 1px solid rgb(36, 193, 246); }

#sub-nav .social a.github { background: url("/images/social/github.png?1475=
599307") center center no-repeat rgb(175, 182, 202); border: 1px solid rgb(=
175, 182, 202); }

#sub-nav .social a.github:hover { border: 1px solid rgb(144, 154, 182); }

#sub-nav .social a.coderwall { background: url("/images/social/coderwall.pn=
g?1475599307") center center no-repeat rgb(58, 114, 159); border: 1px solid=
 rgb(58, 114, 159); }

#sub-nav .social a.coderwall:hover { border: 1px solid rgb(44, 87, 122); }

#sub-nav .social a.pinboard { background: url("/images/social/pinboard.png?=
1475599307") center center no-repeat rgb(0, 102, 200); border: 1px solid rg=
b(58, 114, 159); }

#sub-nav .social a.pinboard:hover { border: 1px solid rgb(0, 82, 204); }

#sub-nav .social a.linkedin { background: url("/images/social/linkedin.png?=
1475599307") center center no-repeat rgb(0, 90, 135); border: 1px solid rgb=
(0, 90, 135); }

#sub-nav .social a.linkedin:hover { border: 1px solid rgb(0, 56, 84); }

#sub-nav .social a.pinterest { background: url("/images/social/pinterest.pn=
g?1475599307") center center no-repeat rgb(190, 64, 55); border: 1px solid =
rgb(190, 64, 55); }

#sub-nav .social a.pinterest:hover { border: 1px solid rgb(150, 51, 44); }

#sub-nav .social a.delicious { background: url("/images/social/delicious.pn=
g?1475599307") center center no-repeat rgb(50, 113, 203); border: 1px solid=
 rgb(50, 113, 203); }

#sub-nav .social a.delicious:hover { border: 1px solid rgb(40, 90, 162); }

#sub-nav .social a.rss { background: url("/images/social/rss.png?1475599307=
") center center no-repeat rgb(239, 117, 34); border: 1px solid rgb(239, 11=
7, 34); }

#sub-nav .social a.rss:hover { border: 1px solid rgb(207, 93, 15); }

#sub-nav .social a.instagram { background: url("/images/social/instagram.pn=
g?1475599307") center center no-repeat rgb(64, 110, 149); border: 1px solid=
 rgb(64, 110, 149); }

#sub-nav .social a.instagram:hover { border: 1px solid rgb(49, 84, 113); }

#pagenavi { padding: 20px 0px; height: 20px; line-height: 20px; position: r=
elative; border-top: 1px solid rgb(255, 255, 255); border-bottom: 1px solid=
 rgb(221, 221, 221); }

#pagenavi a:hover { text-decoration: underline; }

#pagenavi .prev, #pagenavi .next { position: absolute; }

#pagenavi .prev { padding-left: 30px; left: 0px; }

#pagenavi .prev::before { content: "=EF=81=A0"; font: 1.3em FontAwesome; po=
sition: absolute; left: 0px; }

#pagenavi .next { padding-right: 30px; right: 0px; }

#pagenavi .next::before { content: "=EF=81=A1"; font: 1.3em FontAwesome; po=
sition: absolute; right: 0px; }

#pagenavi .center { text-align: center; width: 100%; display: block; }

@media screen and (max-width: 400px) {
  #pagenavi .center { display: none; }
}

article { border-bottom: 1px solid rgb(221, 221, 221); border-top: 1px soli=
d rgb(255, 255, 255); padding: 30px 0px; position: relative; }

@media screen and (max-width: 800px) {
  article { padding-bottom: 15px; }
}

@media screen and (max-width: 600px) {
  article { padding: 15px 0px; }
}

article h2.title { font-size: 1.8em; font-weight: 300; line-height: 35px; m=
argin-bottom: 20px; }

article h2.title a { color: rgb(102, 102, 102); }

article .entry-content { line-height: 2; text-align: justify; }

article .entry-content a:hover { text-decoration: underline; }

article .entry-content .more-link { display: block; margin-top: 16px; paddi=
ng-left: 30px; position: relative; }

article .entry-content .more-link::before { content: "=EF=81=A1"; font: 1.3=
em / 1.6em FontAwesome; position: absolute; left: 0px; }

article .entry-content p, article .entry-content blockquote, article .entry=
-content ul, article .entry-content ol, article .entry-content dl, article =
.entry-content table, article .entry-content iframe, article .entry-content=
 h1, article .entry-content h2, article .entry-content h3, article .entry-c=
ontent h4, article .entry-content h5, article .entry-content h6, article .e=
ntry-content .video-container { margin-top: 10px; }

article .entry-content ul, article .entry-content ol, article .entry-conten=
t dl { margin-left: 20px; }

article .entry-content ul ul, article .entry-content ul ol, article .entry-=
content ul dl, article .entry-content ol ul, article .entry-content ol ol, =
article .entry-content ol dl, article .entry-content dl ul, article .entry-=
content dl ol, article .entry-content dl dl { margin-top: 0px; }

article .entry-content strong { font-weight: bold; }

article .entry-content em { font-style: italic; }

article .entry-content p { margin-top: 10px; }

article .entry-content h2 { font-weight: 300; border-bottom: 1px solid rgb(=
221, 221, 221); position: relative; }

article .entry-content h2::before { content: ""; position: absolute; bottom=
: -2px; border-bottom: 1px solid rgb(255, 255, 255); width: 100%; }

article .entry-content img, article .entry-content video { max-width: 100%;=
 height: auto; }

article .entry-content blockquote { background: rgb(238, 238, 238); border-=
left: 5px solid rgb(204, 204, 204); padding: 15px 20px; margin-top: 10px; }

article .entry-content blockquote > p:first-of-type { margin-top: 0px; }

article .entry-content iframe { border: none; }

article .entry-content table { background: rgb(221, 221, 221); border: 1px =
solid rgb(204, 204, 204); border-spacing: 0px; margin-top: 10px; }

article .entry-content table th { background: rgb(204, 204, 204); padding: =
0px 15px; }

article .entry-content table td { text-align: center; }

article .entry-content table tr:nth-of-type(2n) { background: rgb(213, 213,=
 213); }

article .entry-content .caption { display: block; font-size: 0.9em; color: =
rgb(153, 153, 153); padding-left: 25px; position: relative; }

article .entry-content .caption::before { content: "=EF=81=80"; color: rgb(=
204, 204, 204); font: 1.3em / 1.6em FontAwesome; position: absolute; left: =
0px; }

article .entry-content .video-container { position: relative; padding-botto=
m: 56.25%; padding-top: 30px; height: 0px; overflow: hidden; }

article .entry-content .video-container iframe, article .entry-content .vid=
eo-container object, article .entry-content .video-container embed { positi=
on: absolute; top: 0px; left: 0px; width: 100%; height: 100%; margin-top: 0=
px; }

.share { padding: 15px 0px; border-top: 1px solid rgb(255, 255, 255); borde=
r-bottom: 1px solid rgb(221, 221, 221); }

.post h2.title, .post .entry-content { margin-left: 200px; }

@media screen and (max-width: 800px) {
  .post h2.title, .post .entry-content { margin-left: 0px; }
}

.post .meta { position: absolute; top: 85px; line-height: 2; font-size: 0.9=
em; color: rgb(153, 153, 153); width: 170px; }

@media screen and (max-width: 800px) {
  .post .meta { margin-top: 15px; position: static; width: auto; }
}

.post .meta a { color: rgb(153, 153, 153); transition: all 0.3s ease 0s; }

.post .meta a:hover { color: rgb(102, 102, 102); }

.post .meta .date, .post .meta .tags, .post .meta .comments { padding-left:=
 30px; position: relative; }

.post .meta .date::before, .post .meta .tags::before, .post .meta .comments=
::before { color: rgb(204, 204, 204); font: 1.3em / 1.6em FontAwesome; posi=
tion: absolute; left: 0px; }

@media screen and (max-width: 800px) {
  .post .meta .date, .post .meta .tags, .post .meta .comments { display: in=
line-block; vertical-align: middle; zoom: 1; margin-right: 30px; }
}

.post .meta .date::before { content: "=EF=81=B3"; }

.post .meta .tags::before { content: "=EF=80=AC"; }

.post .meta .comments::before { content: "=EF=81=B5"; }

.archives { position: relative; }

.archives:last-of-type::before { content: ""; position: absolute; bottom: 0=
px; width: 200px; border-top: 1px solid rgb(221, 221, 221); }

.archives .year { line-height: 35px; width: 200px; position: absolute; top:=
 0px; padding-top: 15px; border-top: 1px solid rgb(255, 255, 255); }

.archives .year::before { content: ""; position: absolute; top: -2px; width=
: 100%; border-top: 1px solid rgb(221, 221, 221); }

@media screen and (max-width: 600px) {
  .archives .year { position: relative; width: 100%; }
}

.archives article { margin-left: 200px; padding: 15px 0px; }

@media screen and (max-width: 600px) {
  .archives article { margin-left: 0px; }
  .archives article:first-of-type { border-top: none; padding-top: 30px; }
}

.archives article .title { margin-bottom: 0px; }

.archives article .meta { line-height: 2; font-size: 0.9em; color: rgb(153,=
 153, 153); margin-top: 15px; }

@media screen and (max-width: 600px) {
  .archives article .meta { display: none; }
}

.archives article .meta a { color: rgb(153, 153, 153); transition: all 0.3s=
 ease 0s; }

.archives article .meta a:hover { color: rgb(102, 102, 102); }

.archives article .meta .date, .archives article .meta .tags, .archives art=
icle .meta .comments { padding-left: 30px; position: relative; }

.archives article .meta .date::before, .archives article .meta .tags::befor=
e, .archives article .meta .comments::before { color: rgb(204, 204, 204); f=
ont: 1.3em / 1.6em FontAwesome; position: absolute; left: 0px; }

@media screen and (max-width: 600px) {
  .archives article .meta .date, .archives article .meta .tags, .archives a=
rticle .meta .comments { display: inline-block; vertical-align: middle; zoo=
m: 1; margin-right: 30px; }
}

.archives article .meta .date::before { content: "=EF=81=B3"; }

.archives article .meta .tags::before { content: "=EF=80=AC"; }

.archives article .meta .comments::before { content: "=EF=81=B5"; }

#comment { padding: 30px 0px; border-top: 1px solid rgb(255, 255, 255); bor=
der-bottom: 1px solid rgb(221, 221, 221); }

#comment h2.title { font-size: 25px; font-weight: 300; line-height: 35px; m=
argin-bottom: 20px; }

footer { padding: 15px 0px; border-top: 1px solid rgb(255, 255, 255); text-=
align: center; font-size: 0.9em; }

article code, article pre { background: rgb(221, 221, 221); border: 1px sol=
id rgb(204, 204, 204); font-family: Menlo, Monaco, "Andale Mono", "lucida c=
onsole", "Courier New", monospace; }

article code { font-size: 0.9em; padding: 1px 3px; margin: 0px 3px; border-=
radius: 5px; }

article pre { line-height: 1.5; margin-top: 10px; padding: 5px 15px; overfl=
ow-x: auto; border-radius: 5px; }

article pre code { background: none; border: none; padding: 0px; margin: 0p=
x; border-radius: 0px; }

figure.code { background: rgb(221, 221, 221); border: 1px solid rgb(204, 20=
4, 204); margin-top: 10px; padding: 5px 15px; border-radius: 5px; }

figure.code figcaption { font-size: 0.9em; position: relative; }

figure.code figcaption span { margin: -5px -15px 0px; padding: 5px 15px; di=
splay: block; background: -webkit-linear-gradient(top, rgb(204, 204, 204), =
rgb(221, 221, 221)); }

figure.code figcaption span:empty { display: none; }

figure.code figcaption a { position: absolute; top: 5px; right: 0px; }

figure.code code, figure.code pre { background: none; border: none; padding=
: 0px; margin: 0px; border-radius: 0px; }

figure.code .highlight { overflow-x: auto; }

figure.code .line-numbers { border-right: 1px solid rgb(204, 204, 204); fon=
t-family: Menlo, Monaco, "Andale Mono", "lucida console", "Courier New", mo=
nospace; padding-right: 15px; text-align: right; }

figure.code table { border: none; text-align: left; margin-top: 0px; }

figure.code table td { text-align: left; }

figure.code td.code { width: 100%; padding-left: 15px; overflow-x: auto; }

.entry-content .gist { background: rgb(221, 221, 221); color: rgb(102, 102,=
 102); padding: 30px 15px 5px; margin-top: 10px; border: 1px solid rgb(204,=
 204, 204); position: relative; overflow: hidden; border-radius: 5px; }

.entry-content .gist .gist-file { margin: 0px; }

.entry-content .gist .gist-file .gist-data { background: none; border: none=
; }

.entry-content .gist .gist-file .gist-data pre { line-height: inherit; text=
-align: left; }

.entry-content .gist .gist-file .gist-meta { font: 300 0.9em / 1.5 Helvetic=
aNeue-Light, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, sa=
ns-serif; margin: 0px -16px -6px; padding: 5px 15px; background: -webkit-li=
near-gradient(top, rgb(221, 221, 221), rgb(204, 204, 204)); }

.entry-content .gist .gist-file .gist-meta a { color: rgb(37, 143, 184); }

.entry-content .gist .gist-file .gist-meta a:first-of-type { position: abso=
lute; top: 5px; right: 15px; z-index: 1; }

.entry-content .gist .gist-file .gist-meta a:nth-of-type(2) { position: abs=
olute; top: 0px; left: 0px; padding: 5px 15px; width: 100%; background: -we=
bkit-linear-gradient(top, rgb(204, 204, 204), rgb(221, 221, 221)); }

figure.code .c, .gist-highlight .c { color: rgb(147, 161, 161) !important; =
font-style: italic !important; }

figure.code .cm, .gist-highlight .cm { color: rgb(147, 161, 161) !important=
; font-style: italic !important; }

figure.code .cp, .gist-highlight .cp { color: rgb(147, 161, 161) !important=
; font-style: italic !important; }

figure.code .c1, .gist-highlight .c1 { color: rgb(147, 161, 161) !important=
; font-style: italic !important; }

figure.code .cs, .gist-highlight .cs { color: rgb(147, 161, 161) !important=
; font-weight: bold !important; font-style: italic !important; }

figure.code .err, .gist-highlight .err { color: rgb(220, 50, 47) !important=
; background: none !important; }

figure.code .k, .gist-highlight .k { color: rgb(203, 75, 22) !important; }

figure.code .o, .gist-highlight .o { color: rgb(88, 110, 117) !important; f=
ont-weight: bold !important; }

figure.code .p, .gist-highlight .p { color: rgb(88, 110, 117) !important; }

figure.code .ow, .gist-highlight .ow { color: rgb(42, 161, 152) !important;=
 font-weight: bold !important; }

figure.code .gd, .gist-highlight .gd { display: inline-block; color: rgb(88=
, 110, 117) !important; background-color: rgb(244, 197, 182) !important; }

figure.code .gd .x, .gist-highlight .gd .x { display: inline-block; color: =
rgb(88, 110, 117) !important; background-color: rgb(241, 177, 164) !importa=
nt; }

figure.code .ge, .gist-highlight .ge { color: rgb(88, 110, 117) !important;=
 font-style: italic !important; }

figure.code .gh, .gist-highlight .gh { color: rgb(147, 161, 161) !important=
; }

figure.code .gi, .gist-highlight .gi { display: inline-block; color: rgb(88=
, 110, 117) !important; background-color: rgb(229, 227, 181) !important; }

figure.code .gi .x, .gist-highlight .gi .x { display: inline-block; color: =
rgb(88, 110, 117) !important; background-color: rgb(205, 208, 136) !importa=
nt; }

figure.code .gs, .gist-highlight .gs { color: rgb(88, 110, 117) !important;=
 font-weight: bold !important; }

figure.code .gu, .gist-highlight .gu { color: rgb(108, 113, 196) !important=
; }

figure.code .kc, .gist-highlight .kc { color: rgb(133, 153, 0) !important; =
font-weight: bold !important; }

figure.code .kd, .gist-highlight .kd { color: rgb(38, 139, 210) !important;=
 }

figure.code .kp, .gist-highlight .kp { color: rgb(203, 75, 22) !important; =
font-weight: bold !important; }

figure.code .kr, .gist-highlight .kr { color: rgb(211, 54, 130) !important;=
 font-weight: bold !important; }

figure.code .kt, .gist-highlight .kt { color: rgb(42, 161, 152) !important;=
 }

figure.code .n, .gist-highlight .n { color: rgb(38, 139, 210) !important; }

figure.code .na, .gist-highlight .na { color: rgb(38, 139, 210) !important;=
 }

figure.code .nb, .gist-highlight .nb { color: rgb(133, 153, 0) !important; =
}

figure.code .nc, .gist-highlight .nc { color: rgb(211, 54, 130) !important;=
 }

figure.code .no, .gist-highlight .no { color: rgb(181, 137, 0) !important; =
}

figure.code .nl, .gist-highlight .nl { color: rgb(133, 153, 0) !important; =
}

figure.code .ne, .gist-highlight .ne { color: rgb(38, 139, 210) !important;=
 font-weight: bold !important; }

figure.code .nf, .gist-highlight .nf { color: rgb(38, 139, 210) !important;=
 font-weight: bold !important; }

figure.code .nn, .gist-highlight .nn { color: rgb(181, 137, 0) !important; =
}

figure.code .nt, .gist-highlight .nt { color: rgb(38, 139, 210) !important;=
 font-weight: bold !important; }

figure.code .nx, .gist-highlight .nx { color: rgb(181, 137, 0) !important; =
}

figure.code .vg, .gist-highlight .vg { color: rgb(38, 139, 210) !important;=
 }

figure.code .vi, .gist-highlight .vi { color: rgb(38, 139, 210) !important;=
 }

figure.code .nv, .gist-highlight .nv { color: rgb(38, 139, 210) !important;=
 }

figure.code .mf, .gist-highlight .mf { color: rgb(42, 161, 152) !important;=
 }

figure.code .m, .gist-highlight .m { color: rgb(42, 161, 152) !important; }

figure.code .mh, .gist-highlight .mh { color: rgb(42, 161, 152) !important;=
 }

figure.code .mi, .gist-highlight .mi { color: rgb(42, 161, 152) !important;=
 }

figure.code .s, .gist-highlight .s { color: rgb(42, 161, 152) !important; }

figure.code .sd, .gist-highlight .sd { color: rgb(42, 161, 152) !important;=
 }

figure.code .s2, .gist-highlight .s2 { color: rgb(42, 161, 152) !important;=
 }

figure.code .se, .gist-highlight .se { color: rgb(220, 50, 47) !important; =
}

figure.code .si, .gist-highlight .si { color: rgb(38, 139, 210) !important;=
 }

figure.code .sr, .gist-highlight .sr { color: rgb(42, 161, 152) !important;=
 }

figure.code .s1, .gist-highlight .s1 { color: rgb(42, 161, 152) !important;=
 }

#banner { color: rgb(153, 153, 153); padding: 30px 0px; line-height: 30px; =
text-align: center; position: relative; display: none; border-top: 1px soli=
d rgb(255, 255, 255); border-bottom: 1px solid rgb(221, 221, 221); }

#banner:hover a { color: rgb(37, 143, 184); }

#banner a { color: rgb(153, 153, 153); transition: all 0.3s ease 0s; }

#banner a:hover { text-decoration: underline; }

#banner small { position: absolute; right: 0px; bottom: 0px; }

#banner .loading { background: url("/images/loading_pacman.gif?1475599307")=
 center center no-repeat; text-indent: -9999px; }

#banner .container { height: 30px; overflow: hidden; position: relative; di=
splay: none; }

#banner .container .feed { list-style: none; position: absolute; top: 0px; =
width: 100%; }

#banner .container .feed li { position: relative; }

#banner .container .feed li small { position: absolute; right: 0px; }

.fancybox-wrap, .fancybox-skin, .fancybox-outer, .fancybox-inner, .fancybox=
-image, .fancybox-wrap iframe, .fancybox-wrap object, .fancybox-nav, .fancy=
box-nav span, .fancybox-tmp { padding: 0px; margin: 0px; border: 0px; outli=
ne: none; vertical-align: top; }

.fancybox-wrap { position: absolute; top: 0px; left: 0px; z-index: 8020; }

.fancybox-skin { position: relative; background: rgb(249, 249, 249); color:=
 rgb(68, 68, 68); text-shadow: none; border-radius: 4px; }

.fancybox-opened { z-index: 8030; }

.fancybox-opened .fancybox-skin { box-shadow: rgba(0, 0, 0, 0.5) 0px 10px 2=
5px; }

.fancybox-outer, .fancybox-inner { position: relative; }

.fancybox-inner { overflow: hidden; }

.fancybox-type-iframe .fancybox-inner { }

.fancybox-error { color: rgb(68, 68, 68); font: 14px / 20px "Helvetica Neue=
", Helvetica, Arial, sans-serif; margin: 0px; padding: 15px; white-space: n=
owrap; }

.fancybox-image, .fancybox-iframe { display: block; width: 100%; height: 10=
0%; }

.fancybox-image { max-width: 100%; max-height: 100%; }

#fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next spa=
n { background-image: url("fancybox_sprite.png"); }

#fancybox-loading { position: fixed; top: 50%; left: 50%; margin-top: -22px=
; margin-left: -22px; background-position: 0px -108px; opacity: 0.8; cursor=
: pointer; z-index: 8060; }

#fancybox-loading div { width: 44px; height: 44px; background: url("fancybo=
x_loading.gif") center center no-repeat; }

.fancybox-close { position: absolute; top: -18px; right: -18px; width: 36px=
; height: 36px; cursor: pointer; z-index: 8040; }

.fancybox-nav { position: absolute; top: 0px; width: 40%; height: 100%; cur=
sor: pointer; text-decoration: none; background: url("blank.gif") transpare=
nt; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); z-index: 8040; }

.fancybox-prev { left: 0px; }

.fancybox-next { right: 0px; }

.fancybox-nav span { position: absolute; top: 50%; width: 36px; height: 34p=
x; margin-top: -18px; cursor: pointer; z-index: 8040; visibility: hidden; }

.fancybox-prev span { left: 10px; background-position: 0px -36px; }

.fancybox-next span { right: 10px; background-position: 0px -72px; }

.fancybox-nav:hover span { visibility: visible; }

.fancybox-tmp { position: absolute; top: -99999px; left: -99999px; visibili=
ty: hidden; max-width: 99999px; max-height: 99999px; overflow: visible !imp=
ortant; }

.fancybox-lock { width: auto; overflow: hidden !important; }

.fancybox-lock body { overflow: hidden !important; }

.fancybox-lock-test { overflow-y: hidden !important; }

.fancybox-overlay { position: absolute; top: 0px; left: 0px; overflow: hidd=
en; display: none; z-index: 8010; background: url("fancybox_overlay.png"); =
}

.fancybox-overlay-fixed { position: fixed; bottom: 0px; right: 0px; }

.fancybox-lock .fancybox-overlay { overflow: auto scroll; }

.fancybox-title { visibility: hidden; font: 13px / 20px "Helvetica Neue", H=
elvetica, Arial, sans-serif; position: relative; text-shadow: none; z-index=
: 8050; }

.fancybox-opened .fancybox-title { visibility: visible; }

.fancybox-title-float-wrap { position: absolute; bottom: 0px; right: 50%; m=
argin-bottom: -35px; z-index: 8050; text-align: center; }

.fancybox-title-float-wrap .child { display: inline-block; margin-right: -1=
00%; padding: 2px 20px; background: rgba(0, 0, 0, 0.8); border-radius: 15px=
; text-shadow: rgb(34, 34, 34) 0px 1px 2px; color: rgb(255, 255, 255); font=
-weight: bold; line-height: 24px; white-space: nowrap; }

.fancybox-title-outside-wrap { position: relative; margin-top: 10px; color:=
 rgb(255, 255, 255); }

.fancybox-title-inside-wrap { padding-top: 10px; }

.fancybox-title-over-wrap { position: absolute; bottom: 0px; left: 0px; col=
or: rgb(255, 255, 255); padding: 10px; background: rgba(0, 0, 0, 0.8); }

@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen a=
nd (min--moz-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ra=
tio: 1.5) {
  #fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next s=
pan { background-image: url("fancybox_sprite@2x.png"); background-size: 44p=
x 152px; }
  #fancybox-loading div { background-image: url("fancybox_loading@2x.gif");=
 background-size: 24px 24px; }
}
------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://willi.am/images/social/twitter.png?1475599307

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAwFBMVEUAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEDAwMLCwsfHx87OztgYGCZ
mZnDw8Pk5OTw8PD39/f8/Pz9/f3+/v7/////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
///////ceRldAAAAOXRSTlMAAAAAAAAAAAAAAAAAAAAAAAAAAQMIDBEYHSEhIiQlKzM+SVdgbXN7
homOkpeco6mxucHO2OLy9v5W4iUbAAAABnRFWHRUaXRsZQCo7tInAAAAB3RFWHRBdXRob3IAqa7M
SAAAAAx0RVh0RGVzY3JpcHRpb24AEwkhIwAAAAp0RVh0Q29weXJpZ2h0AKwPzDoAAAAHdEVYdEUt
bWFpbAB9CJvVAAAABHRFWHRVUkwAeKPTDwAAAGpJREFUGNONj0sKACEMQ916hroYpSII3QhTyP0v
NvUzH2Zldn0kIXX+J7cPDgUqvYBOQCETUAw+A8iCTB2EJGwGcwCngQqVhiHlHllHV5kdrDeIBiRZ
ySLadzC0fRIWSU+graWUh0XL5nMXzj8cIubJnYAAAAAASUVORK5CYII=

------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://willi.am/images/social/github.png?1475599307

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAwFBMVEUAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAABAQEFBQUPDw8cHBw2NjZmZmZ+fn6goKC4uLjOzs7h4eHr6+vz
8/P39/f6+vr7+/v8/Pz9/f39/f3+/v7+/v7/////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//////+uxkaYAAAAPHRSTlMAAAAAAAAAAAAAAAEDBgoPFR4iJyouMjIzMzI0NjtASVRbZG51fYSM
mKGrsLi8wsfM0dbZ3eLm7PL1+/2MpSaJAAAABnRFWHRUaXRsZQCo7tInAAAAB3RFWHRBdXRob3IA
qa7MSAAAAAx0RVh0RGVzY3JpcHRpb24AEwkhIwAAAAp0RVh0Q29weXJpZ2h0AKwPzDoAAAAHdEVY
dEUtbWFpbAB9CJvVAAAABHRFWHRVUkwAeKPTDwAAAIJJREFUGNNt0L0KxSAMBWCnzJ0PiEggoIND
oIgl7/9c9afoHW62fJyQEEdEAM2Cv4gc0ZVriswsemOB2lfPAmwwnsC7t4IBcuD+B4jlQJXgQvBH
JIQ+4pH06V1TobEFkoERknnwvENLa2aJPuiZ0tRq3tDprtZ+IWpVTdgAePa8vvACXA8iJ8muZz0A
AAAASUVORK5CYII=

------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://willi.am/images/social/rss.png?1475599307

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAwFBMVEUAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAADAwMSEhI5OTmOjo7Nzc3z8/P/////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
///+/v7XL34KAAAAOXRSTlMAAAAAAAAAAAIHFzpvuOL4/v38+ffy8e3p19DCt6uin5WSjouGhYJ+
e3dya2VfUk1GQDw0LyYiHR5MutCkAAAABnRFWHRUaXRsZQCo7tInAAAAB3RFWHRBdXRob3IAqa7M
SAAAAAx0RVh0RGVzY3JpcHRpb24AEwkhIwAAAAp0RVh0Q29weXJpZ2h0AKwPzDoAAAAHdEVYdEUt
bWFpbAB9CJvVAAAABHRFWHRVUkwAeKPTDwAAAKtJREFUGNNFz9sOgjAMBuDd/PcepizhZMQNjCLM
MZq+/4vZiUiT7eLL+rdT3j3GGVspx4dz3k0bNJxK13GFoS5MItP/QA75Sgs1C4SnJyDkqyjLnFUB
dBHp/6G6BUSMzFfeFiehCiRd9RIaS5EOQbOOXwA66ZpQJVY0lDdCmZ6PzDmp/sjsEDUbIsPGy19S
IiTxLdf+qWKxy0bgmraQkFZhvr9kVW9dwGBb/wFfnB+n9XlT2AAAAABJRU5ErkJggg==

------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://itsananderson.blob.core.windows.net/post-images/azure-account-access-keys.png

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
l4FRs13duMJ4AYnGRRHQKyGRGHJo+PnUIEOzo9uGp3pqJFbw2KBZxcCqI8sP1zIW7RoS7GBk/Dpm
9EvS4CW9wV7dH2zGqUQbJH1K2fONTxxVUlJ69/EAQVJsNjs1NfXPvyW8detWU1MThUJ8aIhEIn19
/WHDhkmLgEycOCoWi3jCNjJNmUmmgiImFgmF7aDpCIIM5AaDKk9GhHxBK4qAphMZ5VfpdExeaP7w
+MuzbUJFkpjNRaXDHhiFosqgkvmCFjGJwaTJgaaESMThoQImQ5WKb7SNJwaZCJYk06hKNDLCFbSQ
qYoMCh08kFjE5oj4kr4k2AchharEoFARlMsV8TCEQqfKU0mIQMgCjyTZKybYPuXHvk9/0jPdYWBB
f/b/Bdb/9C84010sFiood+1v6RaQsIfHZ3OMF+xynp+bs/JhQSKZzPjvvFd+xsACm5KTk4OBBf0B
6Oj94ac5n+lfEFgYJuTTzLw6rXdWU0UxhEpBYuM8wxu1lGj0/9Q75ScKrIKCAhBY0uthfeXWoH8l
KpUKAusLrofV3t5eXl7++YG19Lqhyk94xVFMJBCxhG/vWEmlqdJB71Ba+M8AgbW4T6CxugNR/lLf
ILBycnKkLSyiCoI+RqFQQGBJr9BAVH0G0ABpbW2trKzs2LEjUfW/tHJqyJKBJOhnI8ZQRYYG5atf
na8NLIFAkJaWBruB0F8DjSyh8MOT6j4LODiNjIx0deEFGCDC1wYWBEHQD/Pdz8OCIAj6VmBgQRAk
M2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2Bg
QRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAk
M2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2Bg
QRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAk
M2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2Bg
QRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM2BgQRAkM0gYhhGTEARBX4TL5QqFQrFYLC2SSCQa
jcZkMsnkb9wkgoEFQdCXa2hoaGxsbG9v5/F4IpFIWglySk5OTl5eXkNDQ1dXV1r5TcDAgiDoS4BW
VXZ2NvhXGk/q6uqKiopUKhW0s0B+tbS0sNlsFEVBU8vKykpVVZVY7evAwIIg6G+rqakpLi4G6aGt
ra2jo6OkpETM+IBAIKisrKyvr+fz+SYmJkZGRqCrSMz7UjCwIAj6e+rq6goKCkB0dO7c+ZNR9SEO
h5OZmQnCC/QNzc3NidovBQMLgqC/AaRVfn4+6APa2dkxmUyi9i+BkMnIyGhubjY1NTU2NiZqvwg8
rQGCoM8lFAorKipAz87Kyuoz0wqQLq+goFBdXc1isYjaLwIDC4KgzyVNHBMTE0VFRaLq8zAYDAsL
Cz6fX1VVRVR9ERhYEAR9rrKyMtBQ0tPTI8p/6dWrV6WlpUQBQVQkamtrQWwRVX8fDCwIgj5LW1sb
iqKampqfczpobm7u/fv3b9682dDQQFQhiIGBgVgsbmxsJMp/HwwsCII+CwgaOp2upqZGlP9/NTU1
169fBxPOzs4g4KSVgLKyMmigfRhhfxcMLAiCPguXywWBBRBlCR6PJxQKicJbN27caG9vt7a29vHx
IaokKBSKnJwch8Mhyn8fDCwIgj4L6M2BziCNRiPKklNDL168ePfuXaIsAYrl5eV6enqjRo0iqt4C
q1Op1K85lQoGFgRBX6iysrK0tDQmJubevXvSmufPn8fGxqqoqPj7+4N/pZXfEAwsCII+C2gZgUbW
hx1AMzOziRMnKisrg5B6+fJlTU1NZGQk6CQOGjTIwMCAWOgDKIqC1WELC4Kg7w4EE+gDgjwiyhL2
9vbDhg0DQfbs2bNz587x+XwfH59u3boRsz8GAovD4XxNywsGFgRBnwUEFmgf/flUdUdHxwEDBpBI
pPb2dnNzc9C8Imb8CZvNBnkHtkOU/z4YWBAEfRY1NTUymfzJkxJAq8rZ2RlMjBgx4sNR+T+oqqoC
uaalpUWU/z7442cIgj5XaWlpSUmJhYXFJ4eoQH+QwWAQhT9pampKT0/X09OzsrIiqv4+2MKCIOhz
6erqKioqlpWVgc4dUfWBv0grgUBQXFzMZDI/82c9/x8YWBAEfS4QSWZmZmAiNzeXy+VKK/8nFEXB
8hwOx8jI6H9eP+uvwS4hBEF/T2VlJWgugfAyNzdXV1cnav8foC2Wk5MD0kpbW9va2pqo/VIwsCAI
+tukp4yCCS0tLQMDA3l5eWn9h0A3sKKior6+XigUSi+RTMz4CjCwIAj6Enw+Pz8/X3oJBwUFBVVV
VWl3j0QisVis5uZm0LYik8kgy0BD7Ct7gu/AwIIg6Ms1SYDYAp2+D2/zBSJMUVFRU1MT9BlBhEnr
vx4MLAiCvhbo9IF21odhQpX4hlElBQMLgiCZAU9rgCBIZsDAgiBIZsDAgiBIZsDAgiBIZsDAgiBI
ZsDAgiBIZsDAgiBIZsDAgiBIZsDAgiBIZsDAgiBIZsDAgiBIZsDAgiBIZsDAgiBIZsDAgiBIZsDA
giBIZsDAgiBIZsDAgiBIRiDI/wGfD3W/bKl9zAAAAABJRU5ErkJggg==

------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://itsananderson.blob.core.windows.net/post-images/website-access-key-configuration.png

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
AAAAAFQqhP4P6F9jGmjnrbIAAAAASUVORK5CYII=

------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://itsananderson.blob.core.windows.net/post-images/storage-account-environment-variable.png

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

------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://placebacon.net/800/100?image=9

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
YyKP/9k=

------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://itsananderson.blob.core.windows.net/post-images/placebacon-architecture.jpg

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
EFRxnB4Pb0zUtvBKhZ5pvMkbg7QVUAdMLk49znJ+mAEBYoouSZoNPHSqNBwp2aAFzTu1IBBThQIc
DTweKAHg0tAhpFApEhRQBmCniqNBwp1ACindqBCAg8g57U4GkA7NPU0CHg04dKBMDTaQgooAzBTh
VFjhT6QFW4ujEilfLDO5RVkcLvOfuj3IBI+lU764gmxLvu3jRPMVYkAQ4GSwkxwdpPO4A5wO9MZe
+0oQ3lyIFjl8tyxwM4GAD65Kj8x1qtY3zzpbSvDJAJn2rHJIG3ZTfuB59CAMjj8ghGtmlBoJH5p6
mkApphPNAgzRTsIzaeKZY4U4UANd1jR3Y7VUZJ9BVc6lbqwV38vdL5S7sctgEfTORjOM5HqKLDG/
aL5zvgt7OSBhlJPtTDcD0OAhH61NJP5VvFJcRAPuRSqndtZiF4OBx83XHSgRZU07NIQ8GnqaQhSa
bQAlFMDOFPBplDs06gRTvLi38uW2nS4KyLsby4Hbhge6g/8A1qhuPOmsUna5kjxyGhtpA+CCPuZJ
z06g4/WgoA8Vgo+03sKsz5UMREoXJ4Cnqefx4ptxfRPFHAbq2+0PcRlY0lBLL5oxgHn7o5/GgRri
lBpEjgalBpAKTTaACimhGcDSg0yh2acDSAM0uaADNOFMBc0ZoEOBqUHikIU0wsBSYyNpwOnNFFws
f//Z/9sAQwACAQECAQECAgICAgICAgMFAwMDAwMGBAQDBQcGBwcHBgcHCAkLCQgICggHBwoNCgoL
DAwMDAcJDg8NDA4LDAwM/9sAQwECAgIDAwMGAwMGDAgHCAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM/8AAEQgCogKlAwEiAAIRAQMRAf/EAB8AAAEFAQEB
AQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNR
YQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldY
WVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TF
xsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAAB
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

------MultipartBoundary--zdib5tFqRSaC6izBxhONdgoBjPzZ7OUxBpmAVhOXk4------
